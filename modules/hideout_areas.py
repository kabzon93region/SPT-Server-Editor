#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Hideout Areas - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –æ–±–ª–∞—Å—Ç–µ–π —É–±–µ–∂–∏—â–∞
"""

from typing import Dict, Optional

class HideoutAreas:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –æ–±–ª–∞—Å—Ç–µ–π —É–±–µ–∂–∏—â–∞"""
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–æ–≤ –æ–±–ª–∞—Å—Ç–µ–π –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º
    AREA_TYPES = {
        0: "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è",
        1: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
        2: "–°–∞–Ω—É–∑–µ–ª",
        3: "–°–∫–ª–∞–¥",
        4: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
        5: "–û–±–æ–≥—Ä–µ–≤",
        6: "–í–æ–¥–æ—Å–±–æ—Ä–Ω–∏–∫",
        7: "–ú–µ–¥–±–ª–æ–∫",
        8: "–ü–∏—â–µ–±–ª–æ–∫",
        9: "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞",
        10: "–í–µ—Ä—Å—Ç–∞–∫",
        11: "–†–∞–∑–≤–µ–¥—Ü–µ–Ω—Ç—Ä",
        12: "–¢–∏—Ä",
        13: "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
        14: "–Ø—â–∏–∫ –¥–∏–∫–∏—Ö",
        15: "–û—Å–≤–µ—â–µ–Ω–∏–µ",
        16: "–£–≥–æ–ª–æ–∫ –±–æ–µ–≤–æ–π —Å–ª–∞–≤—ã",
        17: "–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä",
        18: "–°–æ–ª–Ω–µ—á–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è",
        19: "–°–∞–º–æ–≥–æ–Ω–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç",
        20: "–ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞",
        21: "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è –µ–ª–∫–∞",
        22: "–°—Ç–µ–Ω–∞",
        23: "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª",
        24: "–û—Ä—É–∂–µ–π–Ω—ã–π —Å—Ç–µ–Ω–¥",
        25: "–ß—Ç–æ-—Ç–æ —Ç—Ä–µ–±—É—é—â–µ–µ –æ—Ä—É–∂–µ–π–Ω—ã–π —Å—Ç–µ–Ω–¥",
        26: "–°—Ç–µ–Ω–¥ –¥–ª—è –±—Ä–æ–Ω–∏",
        27: "–ö—Ä—É–≥ —Å–µ–∫—Ç–∞–Ω—Ç–æ–≤"
    }
    
    @classmethod
    def get_area_name(cls, area_type: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
        return cls.AREA_TYPES.get(area_type, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ({area_type})")
    
    @classmethod
    def get_area_number(cls, area_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        for number, name in cls.AREA_TYPES.items():
            if name == area_name:
                return number
        return None
    
    @classmethod
    def get_all_areas(cls) -> Dict[int, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        return cls.AREA_TYPES.copy()
    
    @classmethod
    def get_area_list(cls) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è ComboBox"""
        return [f"{number}: {name}" for number, name in cls.AREA_TYPES.items()]

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    print("üè† Hideout Areas Test")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π
    test_areas = [0, 1, 10, 15, 27, 99]
    for area_type in test_areas:
        name = HideoutAreas.get_area_name(area_type)
        print(f"–û–±–ª–∞—Å—Ç—å {area_type}: {name}")
    
    print("\n–í—Å–µ –æ–±–ª–∞—Å—Ç–∏:")
    for number, name in HideoutAreas.get_all_areas().items():
        print(f"  {number}: {name}")

if __name__ == "__main__":
    main()
