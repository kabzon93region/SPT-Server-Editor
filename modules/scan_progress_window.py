#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Scan Progress Window - –û–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
from pathlib import Path
from typing import Callable, Optional
from scan_db import DatabaseScanner

class ScanProgressWindow:
    def __init__(self, parent, server_path: Path, on_complete: Optional[Callable] = None):
        self.parent = parent
        self.server_path = server_path
        self.on_complete = on_complete
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.window = tk.Toplevel(parent)
        self.window.title("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        self.window.geometry("500x300")
        self.window.resizable(False, False)
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.window.transient(parent)
        self.window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.scanner: Optional[DatabaseScanner] = None
        self.scan_thread: Optional[threading.Thread] = None
        self.is_scanning = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.start_scanning()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
                               font=('Arial', 14, 'bold'))
        title_label.pack(pady=(0, 20))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = ttk.Label(main_frame, 
                              text="–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å –æ–Ω–ª–∞–π–Ω –±–∞–∑—ã SPT-Tarkov.\n"
                                   "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
                              font=('Arial', 10))
        desc_label.pack(pady=(0, 20))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(main_frame, variable=self.progress_var, 
                                          maximum=100, length=400)
        self.progress_bar.pack(pady=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        self.status_label = ttk.Label(main_frame, textvariable=self.status_var,
                                     font=('Arial', 10))
        self.status_label.pack(pady=(0, 10))
        
        # –°—á–µ—Ç—á–∏–∫
        self.counter_var = tk.StringVar(value="0 / 0")
        self.counter_label = ttk.Label(main_frame, textvariable=self.counter_var,
                                      font=('Arial', 10, 'bold'))
        self.counter_label.pack(pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=(0, 10))
        
        self.pause_button = ttk.Button(button_frame, text="‚è∏Ô∏è –ü–∞—É–∑–∞", 
                                      command=self.toggle_pause, state='disabled')
        self.pause_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.cancel_button = ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                                       command=self.cancel_scanning)
        self.cancel_button.pack(side=tk.LEFT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
        info_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.cache_info_var = tk.StringVar(value="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        self.cache_info_label = ttk.Label(info_frame, textvariable=self.cache_info_var,
                                         font=('Arial', 9))
        self.cache_info_label.pack()
    
    def start_scanning(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.is_scanning = True
        self.scan_thread = threading.Thread(target=self._scan_worker, daemon=True)
        self.scan_thread.start()
    
    def _scan_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
            self.scanner = DatabaseScanner(self.server_path)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callbacks
            self.scanner.set_progress_callback(self.update_progress)
            self.scanner.set_status_callback(self.update_status)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
            self.update_cache_info()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.window.after(0, lambda: self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤..."))
            self.window.after(0, lambda: self.pause_button.config(state='normal'))
            
            results = self.scanner.scan_all_items(delay_range=(0.3, 0.8))
            
            if self.scanner.is_cancelled:
                self.window.after(0, lambda: self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"))
                self.window.after(0, lambda: self.progress_var.set(0))
            else:
                self.window.after(0, lambda: self.status_var.set("–≠–∫—Å–ø–æ—Ä—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç..."))
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                self.scanner.export_cache_to_readable()
                self.window.after(0, lambda: self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"))
                self.window.after(0, lambda: self.progress_var.set(100))
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
            self.scanner.close()
            
        except Exception as e:
            self.window.after(0, lambda: self.status_var.set(f"–û—à–∏–±–∫–∞: {str(e)}"))
            self.window.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"))
        
        finally:
            self.is_scanning = False
            self.window.after(0, self._on_scan_complete)
    
    def update_progress(self, current: int, total: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if total > 0:
            progress = (current / total) * 100
            self.window.after(0, lambda: self.progress_var.set(progress))
            self.window.after(0, lambda: self.counter_var.set(f"{current} / {total}"))
    
    def update_status(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.window.after(0, lambda: self.status_var.set(status))
    
    def update_cache_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ"""
        if self.scanner:
            stats = self.scanner.get_cache_stats()
            info_text = f"–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫—ç—à–µ: {stats['total_items']} | –†–∞–∑–º–µ—Ä: {stats['cache_file_size']} –±–∞–π—Ç"
            self.window.after(0, lambda: self.cache_info_var.set(info_text))
    
    def toggle_pause(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
        if self.scanner:
            if self.scanner.is_paused:
                self.scanner.resume_scanning()
                self.pause_button.config(text="‚è∏Ô∏è –ü–∞—É–∑–∞")
                self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ...")
            else:
                self.scanner.pause_scanning()
                self.pause_button.config(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ...")
    
    def cancel_scanning(self):
        """–û—Ç–º–µ–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.scanner and self.is_scanning:
            result = messagebox.askyesno("–û—Ç–º–µ–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                                       "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?\n"
                                       "–ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            if result:
                self.scanner.cancel_scanning()
                self.pause_button.config(state='disabled')
                self.cancel_button.config(state='disabled')
                self.status_var.set("–û—Ç–º–µ–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    def _on_scan_complete(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.pause_button.config(state='disabled')
        self.cancel_button.config(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", command=self.close_window)
        
        if self.on_complete:
            self.on_complete()
    
    def close_window(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        if self.scanner:
            self.scanner.close()
        self.window.destroy()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    def on_complete():
        print("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        root.quit()
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_window = ScanProgressWindow(root, Path("."), on_complete)
    
    root.mainloop()

if __name__ == "__main__":
    main()
