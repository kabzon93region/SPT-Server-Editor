#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Craft Manager - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç–∞ –≤ —É–±–µ–∂–∏—â–µ
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import orjson as json  # –ò—Å–ø–æ–ª—å–∑—É–µ–º orjson –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è JSON –æ–ø–µ—Ä–∞—Ü–∏–π
from pathlib import Path
from typing import Dict, List, Any, Optional
try:
    from items_cache import ItemsCache
    from hideout_areas import HideoutAreas
    from context_menus import setup_context_menus_for_module
except ImportError:
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    import sys
    from pathlib import Path
    current_dir = Path(__file__).parent
    if str(current_dir) not in sys.path:
        sys.path.insert(0, str(current_dir))
    from items_cache import ItemsCache
    from hideout_areas import HideoutAreas
    from context_menus import setup_context_menus_for_module

class CraftManager:
    def __init__(self, parent, server_path: Path):
        try:
            self.parent = parent
            self.server_path = server_path
            self.production_file = server_path / "database" / "hideout" / "production.json"
            
            # –î–∞–Ω–Ω—ã–µ
            self.production_data = {}
            self.recipes = []
            self.current_recipe_index = -1
            
            # –ö—ç—à –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            try:
                self.items_cache = ItemsCache(server_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                self.items_cache = None
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
            self.parent.title("–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—Ä–∞—Ñ—Ç–∞ - SPT Server Editor")
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            self.parent.update_idletasks()
            self.parent.geometry("")  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            self.parent.minsize(1000, 600)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
            try:
                from modules.ui_utils import add_module_window_controls, create_window_control_buttons
                add_module_window_controls(self.parent)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º: {e}")
            
            # –°—Ç–∏–ª–∏
            self.setup_styles()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.create_widgets()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.load_data()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é
            setup_context_menus_for_module(self)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
            self.parent.protocol("WM_DELETE_WINDOW", self.on_closing)
            
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CraftManager: {e}")
            import traceback
            traceback.print_exc()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            import tkinter.messagebox as mb
            mb.showerror("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—Ä–∞—Ñ—Ç–∞:\n{str(e)}")
            raise
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –º–æ–¥—É–ª—è
            self.parent.destroy()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –∫—Ä–∞—Ñ—Ç–∞: {e}")
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Info.TLabel', font=('Arial', 10))
        style.configure('Recipe.Treeview', font=('Consolas', 9))
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º content_container –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        parent_container = getattr(self.parent, 'content_container', self.parent)
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º content_container, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º grid
        if hasattr(self.parent, 'content_container'):
            parent_container.grid_rowconfigure(0, weight=1)
            parent_container.grid_columnconfigure(0, weight=1)
            main_frame = ttk.Frame(parent_container, padding="10")
            main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        else:
            # –ï—Å–ª–∏ content_container –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º pack
            main_frame = ttk.Frame(parent_container, padding="10")
            main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üî® –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç–∞", style='Header.TLabel')
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        left_frame = ttk.LabelFrame(main_frame, text="–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤", padding="10")
        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # –ü–æ–∏—Å–∫
        search_frame = ttk.Frame(left_frame)
        search_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").grid(row=0, column=0, padx=(0, 5))
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_recipes)
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=20)
        search_entry.grid(row=0, column=1, sticky=(tk.W, tk.E))
        search_frame.columnconfigure(1, weight=1)
        
        # –î–µ—Ä–µ–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        tree_frame = ttk.Frame(left_frame)
        tree_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        columns = ('ID', '–ü—Ä–æ–¥—É–∫—Ç', '–í—Ä–µ–º—è', '–û–±–ª–∞—Å—Ç—å')
        self.recipes_tree = ttk.Treeview(tree_frame, columns=columns, show='headings', style='Recipe.Treeview')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.recipes_tree.heading('ID', text='ID', command=lambda: self.sort_recipes_by_column('ID'))
        self.recipes_tree.heading('–ü—Ä–æ–¥—É–∫—Ç', text='–ü—Ä–æ–¥—É–∫—Ç', command=lambda: self.sort_recipes_by_column('–ü—Ä–æ–¥—É–∫—Ç'))
        self.recipes_tree.heading('–í—Ä–µ–º—è', text='–í—Ä–µ–º—è (—Å–µ–∫)', command=lambda: self.sort_recipes_by_column('–í—Ä–µ–º—è'))
        self.recipes_tree.heading('–û–±–ª–∞—Å—Ç—å', text='–û–±–ª–∞—Å—Ç—å', command=lambda: self.sort_recipes_by_column('–û–±–ª–∞—Å—Ç—å'))
        
        self.recipes_tree.column('ID', width=100)
        self.recipes_tree.column('–ü—Ä–æ–¥—É–∫—Ç', width=200)
        self.recipes_tree.column('–í—Ä–µ–º—è', width=80)
        self.recipes_tree.column('–û–±–ª–∞—Å—Ç—å', width=80)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.recipes_sort_column = None
        self.recipes_sort_reverse = False
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –¥–µ—Ä–µ–≤–∞
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.recipes_tree.yview)
        self.recipes_tree.configure(yscrollcommand=tree_scrollbar.set)
        
        self.recipes_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        tree_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        tree_frame.columnconfigure(0, weight=1)
        tree_frame.rowconfigure(0, weight=1)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.recipes_tree.bind('<<TreeviewSelect>>', self.on_recipe_select)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
        buttons_frame = ttk.Frame(left_frame)
        buttons_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Button(buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", command=self.add_recipe).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(buttons_frame, text="–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", command=self.delete_recipe).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(buttons_frame, text="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å", command=self.duplicate_recipe).grid(row=0, column=2)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö
        ttk.Button(buttons_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö", command=self.open_scav_recipes).grid(row=1, column=0, columnspan=3, pady=(5, 0), sticky=(tk.W, tk.E))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        right_frame = ttk.LabelFrame(main_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞", padding="10")
        right_frame.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        props_frame = ttk.LabelFrame(right_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞", padding="10")
        props_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # ID —Ä–µ—Ü–µ–ø—Ç–∞
        ttk.Label(props_frame, text="ID —Ä–µ—Ü–µ–ø—Ç–∞:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.recipe_id_var = tk.StringVar()
        ttk.Entry(props_frame, textvariable=self.recipe_id_var, width=30).grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2, padx=(5, 0))
        
        # –ü—Ä–æ–¥—É–∫—Ç
        ttk.Label(props_frame, text="ID –ø—Ä–æ–¥—É–∫—Ç–∞:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.end_product_var = tk.StringVar()
        end_product_entry = ttk.Entry(props_frame, textvariable=self.end_product_var, width=30)
        end_product_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=2, padx=(5, 0))
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        self.end_product_display_var = tk.StringVar()
        self.end_product_display_label = ttk.Label(props_frame, textvariable=self.end_product_display_var, 
                                                  font=('Arial', 9), foreground='blue')
        self.end_product_display_label.grid(row=1, column=2, sticky=tk.W, pady=2, padx=(10, 0))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é ID
        self.end_product_var.trace('w', self.update_end_product_display)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ttk.Label(props_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.count_var = tk.StringVar()
        ttk.Entry(props_frame, textvariable=self.count_var, width=10).grid(row=2, column=1, sticky=tk.W, pady=2, padx=(5, 0))
        
        # –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        ttk.Label(props_frame, text="–í—Ä–µ–º—è (—Å–µ–∫):").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.production_time_var = tk.StringVar()
        ttk.Entry(props_frame, textvariable=self.production_time_var, width=10).grid(row=3, column=1, sticky=tk.W, pady=2, padx=(5, 0))
        
        # –û–±–ª–∞—Å—Ç—å
        ttk.Label(props_frame, text="–¢–∏–ø –æ–±–ª–∞—Å—Ç–∏:").grid(row=4, column=0, sticky=tk.W, pady=2)
        self.area_type_var = tk.StringVar()
        area_combo = ttk.Combobox(props_frame, textvariable=self.area_type_var, width=30, state="readonly")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–∑ hideout_areas.py
        area_list = HideoutAreas.get_area_list()
        area_combo['values'] = area_list
        area_combo.grid(row=4, column=1, sticky=tk.W, pady=2, padx=(5, 0))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤—ã–±–æ—Ä–∞
        self.area_type_display_var = tk.StringVar()
        self.area_type_display_label = ttk.Label(props_frame, textvariable=self.area_type_display_var, 
                                                foreground="blue", font=("Arial", 9))
        self.area_type_display_label.grid(row=4, column=2, sticky=tk.W, pady=2, padx=(5, 0))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤—ã–±–æ—Ä–∞
        self.area_type_var.trace('w', self.update_area_type_display)
        
        # –§–ª–∞–≥–∏
        flags_frame = ttk.LabelFrame(props_frame, text="–§–ª–∞–≥–∏", padding="5")
        flags_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        self.continuous_var = tk.BooleanVar()
        ttk.Checkbutton(flags_frame, text="–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", variable=self.continuous_var).grid(row=0, column=0, sticky=tk.W, padx=(0, 20))
        
        self.locked_var = tk.BooleanVar()
        ttk.Checkbutton(flags_frame, text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", variable=self.locked_var).grid(row=0, column=1, sticky=tk.W, padx=(0, 20))
        
        self.need_fuel_var = tk.BooleanVar()
        ttk.Checkbutton(flags_frame, text="–ù—É–∂–Ω–æ —Ç–æ–ø–ª–∏–≤–æ", variable=self.need_fuel_var).grid(row=1, column=0, sticky=tk.W, padx=(0, 20))
        
        self.is_encoded_var = tk.BooleanVar()
        ttk.Checkbutton(flags_frame, text="–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ", variable=self.is_encoded_var).grid(row=1, column=1, sticky=tk.W, padx=(0, 20))
        
        props_frame.columnconfigure(1, weight=1)
        
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
        req_frame = ttk.LabelFrame(right_frame, text="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", padding="10")
        req_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        req_list_frame = ttk.Frame(req_frame)
        req_list_frame.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        req_columns = ('–¢–∏–ø', '–ü—Ä–µ–¥–º–µ—Ç/–û–±–ª–∞—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å')
        self.requirements_tree = ttk.Treeview(req_list_frame, columns=req_columns, show='headings', height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        self.requirements_tree.heading('–¢–∏–ø', text='–¢–∏–ø', command=lambda: self.sort_requirements_by_column('–¢–∏–ø'))
        self.requirements_tree.heading('–ü—Ä–µ–¥–º–µ—Ç/–û–±–ª–∞—Å—Ç—å', text='–ü—Ä–µ–¥–º–µ—Ç/–û–±–ª–∞—Å—Ç—å', command=lambda: self.sort_requirements_by_column('–ü—Ä–µ–¥–º–µ—Ç/–û–±–ª–∞—Å—Ç—å'))
        self.requirements_tree.heading('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å', text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å', command=lambda: self.sort_requirements_by_column('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å'))
        
        self.requirements_tree.column('–¢–∏–ø', width=80)
        self.requirements_tree.column('–ü—Ä–µ–¥–º–µ—Ç/–û–±–ª–∞—Å—Ç—å', width=250)
        self.requirements_tree.column('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å', width=120)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        self.requirements_sort_column = None
        self.requirements_sort_reverse = False
        
        req_scrollbar = ttk.Scrollbar(req_list_frame, orient=tk.VERTICAL, command=self.requirements_tree.yview)
        self.requirements_tree.configure(yscrollcommand=req_scrollbar.set)
        
        self.requirements_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        req_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        req_list_frame.columnconfigure(0, weight=1)
        req_list_frame.rowconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        req_buttons_frame = ttk.Frame(req_frame)
        req_buttons_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E))
        
        ttk.Button(req_buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", command=lambda: self.add_requirement('Item')).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(req_buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å", command=lambda: self.add_requirement('Area')).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(req_buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", command=lambda: self.add_requirement('Tool')).grid(row=0, column=2, padx=(0, 5))
        ttk.Button(req_buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç", command=lambda: self.add_requirement('QuestComplete')).grid(row=0, column=3, padx=(0, 5))
        ttk.Button(req_buttons_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_requirement).grid(row=0, column=4, padx=(5, 0))
        ttk.Button(req_buttons_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.remove_requirement).grid(row=0, column=5, padx=(5, 0))
        
        req_frame.columnconfigure(0, weight=1)
        req_frame.rowconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_frame = ttk.Frame(right_frame)
        save_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Button(save_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", command=self.save_recipe).grid(row=0, column=0, padx=(0, 10))
        ttk.Button(save_frame, text="–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", command=self.cancel_changes).grid(row=0, column=1, padx=(0, 10))
        ttk.Button(save_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", command=self.save_to_file).grid(row=0, column=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        self.parent.columnconfigure(0, weight=1)
        self.parent.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=2)
        main_frame.rowconfigure(1, weight=1)
        left_frame.rowconfigure(1, weight=1)
        right_frame.rowconfigure(1, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.setup_hotkeys()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.production_file.exists():
                with open(self.production_file, 'rb') as f:
                    self.production_data = json.loads(f.read())
                
                self.recipes = self.production_data.get('recipes', [])
                self.populate_recipes_tree()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {self.production_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            traceback.print_exc()
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def populate_recipes_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
            for item in self.recipes_tree.get_children():
                self.recipes_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
            for i, recipe in enumerate(self.recipes):
                recipe_id = recipe.get('_id', 'N/A')
                end_product_id = recipe.get('endProduct', 'N/A')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ç–∏–ø–æ–º –ø—Ä–µ—Ñ–∞–±–∞
                if self.items_cache and end_product_id != 'N/A':
                    end_product_name = self.items_cache.get_item_short_name(end_product_id)
                    prefab_type = self.items_cache.get_item_prefab_type(end_product_id)
                    end_product_display = f"{end_product_name} ({prefab_type})"
                else:
                    end_product_display = 'N/A'
                
                production_time = recipe.get('productionTime', 0)
                area_type_num = recipe.get('areaType', 'N/A')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
                if area_type_num != 'N/A' and isinstance(area_type_num, int):
                    area_type = HideoutAreas.get_area_name(area_type_num)
                else:
                    area_type = str(area_type_num)
                
                self.recipes_tree.insert('', 'end', values=(recipe_id, end_product_display, production_time, area_type))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}")
            import traceback
            traceback.print_exc()
    
    def filter_recipes(self, *args):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_term = self.search_var.get().lower()
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.recipes_tree.get_children():
            self.recipes_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for i, recipe in enumerate(self.recipes):
            recipe_id = recipe.get('_id', '')
            end_product_id = recipe.get('endProduct', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ç–∏–ø–æ–º –ø—Ä–µ—Ñ–∞–±–∞ (–∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —Å–ø–∏—Å–∫–µ)
            if self.items_cache and end_product_id:
                end_product_name = self.items_cache.get_item_short_name(end_product_id)
                prefab_type = self.items_cache.get_item_prefab_type(end_product_id)
                end_product_display = f"{end_product_name} ({prefab_type})"
            else:
                end_product_display = 'N/A'
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            area_type_num = recipe.get('areaType', 'N/A')
            if area_type_num != 'N/A' and isinstance(area_type_num, int):
                area_type_name = HideoutAreas.get_area_name(area_type_num)
            else:
                area_type_name = str(area_type_num)
            
            if (search_term in recipe_id.lower() or 
                search_term in end_product_id.lower() or 
                search_term in end_product_name.lower() or
                search_term in prefab_type.lower() or
                search_term in area_type_name.lower()):
                production_time = recipe.get('productionTime', 0)
                
                self.recipes_tree.insert('', 'end', values=(recipe_id, end_product_display, production_time, area_type_name))
    
    def on_recipe_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞"""
        selection = self.recipes_tree.selection()
        if selection:
            item = self.recipes_tree.item(selection[0])
            recipe_id = item['values'][0]
            
            # –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
            for i, recipe in enumerate(self.recipes):
                if recipe['_id'] == recipe_id:
                    self.current_recipe_index = i
                    self.load_recipe_to_form(recipe)
                    break
    
    def load_recipe_to_form(self, recipe):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Ñ–æ—Ä–º—É"""
        self.recipe_id_var.set(recipe.get('_id', ''))
        self.end_product_var.set(recipe.get('endProduct', ''))
        self.count_var.set(str(recipe.get('count', 1)))
        self.production_time_var.set(str(recipe.get('productionTime', 0)))
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        area_type_num = recipe.get('areaType', '')
        if area_type_num != '' and isinstance(area_type_num, int):
            area_name = HideoutAreas.get_area_name(area_type_num)
            self.area_type_var.set(f"{area_type_num}: {area_name}")
        else:
            self.area_type_var.set("")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
        self.update_area_type_display()
        
        # –§–ª–∞–≥–∏
        self.continuous_var.set(recipe.get('continuous', False))
        self.locked_var.set(recipe.get('locked', False))
        self.need_fuel_var.set(recipe.get('needFuelForAllProductionTime', False))
        self.is_encoded_var.set(recipe.get('isEncoded', False))
        
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
        self.load_requirements(recipe.get('requirements', []))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        self.update_end_product_display()
    
    def update_end_product_display(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        item_id = self.end_product_var.get().strip()
        if self.items_cache and item_id:
            item_name = self.items_cache.get_item_short_name(item_id)
            prefab_type = self.items_cache.get_item_prefab_type(item_id)
            display_text = f"{item_name} ({prefab_type})"
            self.end_product_display_var.set(display_text)
        else:
            self.end_product_display_var.set("")
    
    def update_area_type_display(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        area_selection = self.area_type_var.get().strip()
        if not area_selection:
            self.area_type_display_var.set("")
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "7: –ú–µ–¥–±–ª–æ–∫"
            if ':' in area_selection:
                area_number = int(area_selection.split(':')[0])
                area_name = HideoutAreas.get_area_name(area_number)
                self.area_type_display_var.set(f"‚Üí {area_name}")
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä
                area_number = int(area_selection)
                area_name = HideoutAreas.get_area_name(area_number)
                self.area_type_display_var.set(f"‚Üí {area_name}")
        except (ValueError, IndexError):
            self.area_type_display_var.set("‚Üí –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å")
    
    def sort_recipes_by_column(self, column):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–µ"""
        # –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if self.recipes_sort_column == column:
            self.recipes_sort_reverse = not self.recipes_sort_reverse
        else:
            self.recipes_sort_column = column
            self.recipes_sort_reverse = False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ä–µ–≤–∞
        items = []
        for item in self.recipes_tree.get_children():
            values = self.recipes_tree.item(item)['values']
            items.append((item, values))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        column_index = {'ID': 0, '–ü—Ä–æ–¥—É–∫—Ç': 1, '–í—Ä–µ–º—è': 2, '–û–±–ª–∞—Å—Ç—å': 3}[column]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        def sort_key(item):
            value = item[1][column_index]
            if column == '–í—Ä–µ–º—è':
                # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                try:
                    return int(value) if value else 0
                except (ValueError, TypeError):
                    return 0
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                return str(value).lower()
        
        items.sort(key=sort_key, reverse=self.recipes_sort_reverse)
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item, values in items:
            self.recipes_tree.move(item, '', 'end')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for col in ['ID', '–ü—Ä–æ–¥—É–∫—Ç', '–í—Ä–µ–º—è', '–û–±–ª–∞—Å—Ç—å']:
            if col == column:
                arrow = " ‚Üì" if self.recipes_sort_reverse else " ‚Üë"
                self.recipes_tree.heading(col, text=f"{col}{arrow}")
            else:
                self.recipes_tree.heading(col, text=col)
    
    def load_requirements(self, requirements):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.requirements_tree.get_children():
            self.requirements_tree.delete(item)
        
        self.current_requirements = requirements.copy()
        
        for req in requirements:
            req_type = req.get('type', 'Unknown')
            if req_type == 'Item':
                count = req.get('count', 1)
                template_id = req.get('templateId', 'N/A')
                if self.items_cache and template_id != 'N/A':
                    item_name = self.items_cache.get_item_short_name(template_id)
                    prefab_type = self.items_cache.get_item_prefab_type(template_id)
                    item_display = f"{item_name} ({prefab_type})"
                else:
                    item_display = "Unknown" if template_id != 'N/A' else "N/A"
                self.requirements_tree.insert('', 'end', values=('–ü—Ä–µ–¥–º–µ—Ç', item_display, count))
            elif req_type == 'Area':
                area_type_num = req.get('areaType', 'N/A')
                level = req.get('requiredLevel', 1)
                if area_type_num != 'N/A' and isinstance(area_type_num, int):
                    area_type_name = HideoutAreas.get_area_name(area_type_num)
                else:
                    area_type_name = str(area_type_num)
                self.requirements_tree.insert('', 'end', values=('–û–±–ª–∞—Å—Ç—å', area_type_name, f"–£—Ä–æ–≤–µ–Ω—å {level}"))
            elif req_type == 'Tool':
                template_id = req.get('templateId', 'N/A')
                if self.items_cache and template_id != 'N/A':
                    tool_name = self.items_cache.get_item_short_name(template_id)
                    prefab_type = self.items_cache.get_item_prefab_type(template_id)
                    tool_display = f"{tool_name} ({prefab_type})"
                else:
                    tool_display = "Unknown" if template_id != 'N/A' else "N/A"
                self.requirements_tree.insert('', 'end', values=('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', tool_display, '-'))
            elif req_type == 'QuestComplete':
                quest_id = req.get('questId', 'N/A')
                self.requirements_tree.insert('', 'end', values=('–ö–≤–µ—Å—Ç', quest_id, '-'))
    
    def sort_requirements_by_column(self, column):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ –∫–æ–ª–æ–Ω–∫–µ"""
        # –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if self.requirements_sort_column == column:
            self.requirements_sort_reverse = not self.requirements_sort_reverse
        else:
            self.requirements_sort_column = column
            self.requirements_sort_reverse = False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ä–µ–≤–∞
        items = []
        for item in self.requirements_tree.get_children():
            values = self.requirements_tree.item(item)['values']
            items.append((item, values))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        column_index = {'–¢–∏–ø': 0, '–ü—Ä–µ–¥–º–µ—Ç/–û–±–ª–∞—Å—Ç—å': 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å': 2}[column]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        def sort_key(item):
            value = item[1][column_index]
            if column == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å':
                # –î–ª—è –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/—É—Ä–æ–≤–Ω—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                try:
                    if value == '-':
                        return 0
                    elif value.startswith('–£—Ä–æ–≤–µ–Ω—å '):
                        return int(value.replace('–£—Ä–æ–≤–µ–Ω—å ', ''))
                    else:
                        return int(value)
                except (ValueError, TypeError):
                    return 0
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                return str(value).lower()
        
        items.sort(key=sort_key, reverse=self.requirements_sort_reverse)
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item, values in items:
            self.requirements_tree.move(item, '', 'end')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for col in ['–¢–∏–ø', '–ü—Ä–µ–¥–º–µ—Ç/–û–±–ª–∞—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–£—Ä–æ–≤–µ–Ω—å']:
            if col == column:
                arrow = " ‚Üì" if self.requirements_sort_reverse else " ‚Üë"
                self.requirements_tree.heading(col, text=f"{col}{arrow}")
            else:
                self.requirements_tree.heading(col, text=col)
    
    def add_requirement(self, req_type):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        if not hasattr(self, 'current_requirements'):
            self.current_requirements = []
        
        if req_type == 'Item':
            self.add_item_requirement()
        elif req_type == 'Area':
            self.add_area_requirement()
        elif req_type == 'Tool':
            self.add_tool_requirement()
        elif req_type == 'QuestComplete':
            self.add_quest_requirement()
    
    def add_item_requirement(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        if not self.items_cache:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        def on_item_selected(item_id):
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            count_dialog = tk.Toplevel(self.parent)
            count_dialog.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
            count_dialog.geometry("300x150")
            count_dialog.transient(self.parent)
            count_dialog.grab_set()
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
            x = self.parent.winfo_rootx() + 100
            y = self.parent.winfo_rooty() + 100
            count_dialog.geometry(f"+{x}+{y}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            item_name = self.items_cache.get_item_short_name(item_id)
            prefab_type = self.items_cache.get_item_prefab_type(item_id)
            
            ttk.Label(count_dialog, text=f"–ü—Ä–µ–¥–º–µ—Ç: {item_name}").pack(pady=10)
            ttk.Label(count_dialog, text=f"–¢–∏–ø: {prefab_type}").pack(pady=5)
            
            # –ü–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            count_frame = ttk.Frame(count_dialog)
            count_frame.pack(pady=10)
            
            ttk.Label(count_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").pack(side=tk.LEFT, padx=(0, 5))
            count_var = tk.StringVar(value="1")
            count_entry = ttk.Entry(count_frame, textvariable=count_var, width=10)
            count_entry.pack(side=tk.LEFT)
            count_entry.focus()
            
            def add_item():
                try:
                    count = int(count_var.get()) if count_var.get() else 1
                    if count <= 0:
                        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                except ValueError as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {e}")
                    return
                
                requirement = {
                    "count": count,
                    "isEncoded": False,
                    "isFunctional": False,
                    "isSpawnedInSession": False,
                    "templateId": item_id,
                    "type": "Item"
                }
                
                if not hasattr(self, 'current_requirements'):
                    self.current_requirements = []
                
                self.current_requirements.append(requirement)
                self.load_requirements(self.current_requirements)
                count_dialog.destroy()
            
            # –ö–Ω–æ–ø–∫–∏
            buttons_frame = ttk.Frame(count_dialog)
            buttons_frame.pack(pady=10)
            
            ttk.Button(buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=add_item).pack(side=tk.LEFT, padx=(0, 10))
            ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=count_dialog.destroy).pack(side=tk.LEFT)
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ Enter
            count_entry.bind('<Return>', lambda e: add_item())
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞
        ItemSearchDialog(self.parent, self.items_cache, on_item_selected)
    
    def add_area_requirement(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å")
        dialog.geometry("500x250")
        dialog.transient(self.parent)
        dialog.grab_set()
        
        dialog.geometry("+%d+%d" % (self.parent.winfo_rootx() + 50, self.parent.winfo_rooty() + 50))
        
        ttk.Label(dialog, text="–¢–∏–ø –æ–±–ª–∞—Å—Ç–∏:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        area_type_var = tk.StringVar()
        area_combo = ttk.Combobox(dialog, textvariable=area_type_var, width=40, state="readonly")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        area_list = HideoutAreas.get_area_list()
        area_combo['values'] = area_list
        area_combo.grid(row=0, column=1, padx=10, pady=5, sticky=(tk.W, tk.E))
        
        ttk.Label(dialog, text="–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        level_var = tk.StringVar(value="1")
        ttk.Entry(dialog, textvariable=level_var, width=10).grid(row=1, column=1, padx=10, pady=5, sticky=tk.W)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        dialog.columnconfigure(1, weight=1)
        
        def save_area():
            area_selection = area_type_var.get().strip()
            level = level_var.get().strip()
            
            if not area_selection:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–ª–∞—Å—Ç–∏")
                return
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "7: –ú–µ–¥–±–ª–æ–∫"
                area_type = int(area_selection.split(':')[0])
                level = int(level)
                if level <= 0:
                    raise ValueError
            except (ValueError, IndexError):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                return
            
            requirement = {
                "areaType": area_type,
                "requiredLevel": level,
                "type": "Area"
            }
            
            if not hasattr(self, 'current_requirements'):
                self.current_requirements = []
            
            self.current_requirements.append(requirement)
            self.load_requirements(self.current_requirements)
            dialog.destroy()
        
        ttk.Button(dialog, text="–î–æ–±–∞–≤–∏—Ç—å", command=save_area).grid(row=2, column=0, padx=10, pady=10)
        ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).grid(row=2, column=1, padx=10, pady=10)
    
    def add_tool_requirement(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        if not self.items_cache:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        def on_tool_selected(item_id):
            requirement = {
                "templateId": item_id,
                "type": "Tool"
            }
            
            if not hasattr(self, 'current_requirements'):
                self.current_requirements = []
            
            self.current_requirements.append(requirement)
            self.load_requirements(self.current_requirements)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞
        ItemSearchDialog(self.parent, self.items_cache, on_tool_selected)
    
    def add_quest_requirement(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç")
        dialog.geometry("400x150")
        dialog.transient(self.parent)
        dialog.grab_set()
        
        dialog.geometry("+%d+%d" % (self.parent.winfo_rootx() + 50, self.parent.winfo_rooty() + 50))
        
        ttk.Label(dialog, text="ID –∫–≤–µ—Å—Ç–∞:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        quest_id_var = tk.StringVar()
        ttk.Entry(dialog, textvariable=quest_id_var, width=30).grid(row=0, column=1, padx=10, pady=5)
        
        def save_quest():
            quest_id = quest_id_var.get().strip()
            
            if not quest_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ ID –∫–≤–µ—Å—Ç–∞")
                return
            
            requirement = {
                "questId": quest_id,
                "type": "QuestComplete"
            }
            
            self.current_requirements.append(requirement)
            self.load_requirements(self.current_requirements)
            dialog.destroy()
        
        ttk.Button(dialog, text="–î–æ–±–∞–≤–∏—Ç—å", command=save_quest).grid(row=1, column=0, padx=10, pady=10)
        ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).grid(row=1, column=1, padx=10, pady=10)
    
    def edit_requirement(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        selection = self.requirements_tree.selection()
        if not selection:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        selected_item = selection[0]
        item_index = self.requirements_tree.index(selected_item)
        
        if item_index >= len(self.current_requirements):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        requirement = self.current_requirements[item_index]
        req_type = requirement.get('type', 'Unknown')
        
        if req_type == 'Item':
            self.edit_item_requirement(item_index, requirement)
        elif req_type == 'Area':
            self.edit_area_requirement(item_index, requirement)
        elif req_type == 'Tool':
            self.edit_tool_requirement(item_index, requirement)
        elif req_type == 'QuestComplete':
            self.edit_quest_requirement(item_index, requirement)
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ '{req_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    
    def edit_item_requirement(self, index, requirement):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        def on_item_selected(item_id):
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            dialog = tk.Toplevel(self.parent)
            dialog.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
            dialog.geometry("300x150")
            dialog.transient(self.parent)
            dialog.grab_set()
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
            x = self.parent.winfo_rootx() + 100
            y = self.parent.winfo_rooty() + 100
            dialog.geometry(f"+{x}+{y}")
            
            ttk.Label(dialog, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
            count_var = tk.StringVar(value=str(requirement.get('count', 1)))
            ttk.Entry(dialog, textvariable=count_var, width=10).grid(row=0, column=1, sticky=tk.W, padx=10, pady=5)
            
            def save_item():
                try:
                    count = int(count_var.get())
                    if count <= 0:
                        raise ValueError
                except ValueError:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
                self.current_requirements[index] = {
                    "templateId": item_id,
                    "count": count,
                    "type": "Item"
                }
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                self.load_requirements(self.current_requirements)
                dialog.destroy()
            
            ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_item).grid(row=1, column=0, padx=10, pady=10)
            ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).grid(row=1, column=1, padx=10, pady=10)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
        current_item_id = requirement.get('templateId', '')
        ItemSearchDialog(self.parent, self.items_cache, on_item_selected, current_item_id)
    
    def edit_area_requirement(self, index, requirement):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏")
        dialog.geometry("400x200")
        dialog.transient(self.parent)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        x = self.parent.winfo_rootx() + 50
        y = self.parent.winfo_rooty() + 50
        dialog.geometry(f"+{x}+{y}")
        
        ttk.Label(dialog, text="–¢–∏–ø –æ–±–ª–∞—Å—Ç–∏:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        area_type_var = tk.StringVar()
        area_combo = ttk.Combobox(dialog, textvariable=area_type_var, width=40, state="readonly")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        area_list = HideoutAreas.get_area_list()
        area_combo['values'] = area_list
        area_combo.grid(row=0, column=1, sticky=tk.W, padx=10, pady=5)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        current_area = requirement.get('areaType', 0)
        current_level = requirement.get('requiredLevel', 1)
        area_name = HideoutAreas.get_area_name(current_area)
        area_type_var.set(f"{current_area}: {area_name}")
        
        ttk.Label(dialog, text="–£—Ä–æ–≤–µ–Ω—å:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        level_var = tk.StringVar(value=str(current_level))
        ttk.Entry(dialog, textvariable=level_var, width=10).grid(row=1, column=1, sticky=tk.W, padx=10, pady=5)
        
        dialog.columnconfigure(1, weight=1)
        
        def save_area():
            area_selection = area_type_var.get().strip()
            level = level_var.get().strip()
            
            if not area_selection:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–ª–∞—Å—Ç–∏")
                return
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "7: –ú–µ–¥–±–ª–æ–∫"
                area_type = int(area_selection.split(':')[0])
                level = int(level)
                if level <= 0:
                    raise ValueError
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
            self.current_requirements[index] = {
                "areaType": area_type,
                "requiredLevel": level,
                "type": "Area"
            }
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.load_requirements(self.current_requirements)
            dialog.destroy()
        
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_area).grid(row=2, column=0, padx=10, pady=10)
        ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).grid(row=2, column=1, padx=10, pady=10)
    
    def edit_tool_requirement(self, index, requirement):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        def on_tool_selected(tool_id):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
            self.current_requirements[index] = {
                "templateId": tool_id,
                "type": "Tool"
            }
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.load_requirements(self.current_requirements)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
        current_tool_id = requirement.get('templateId', '')
        ItemSearchDialog(self.parent, self.items_cache, on_tool_selected, current_tool_id)
    
    def edit_quest_requirement(self, index, requirement):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞")
        dialog.geometry("400x150")
        dialog.transient(self.parent)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        x = self.parent.winfo_rootx() + 50
        y = self.parent.winfo_rooty() + 50
        dialog.geometry(f"+{x}+{y}")
        
        ttk.Label(dialog, text="ID –∫–≤–µ—Å—Ç–∞:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        quest_id_var = tk.StringVar(value=requirement.get('questId', ''))
        ttk.Entry(dialog, textvariable=quest_id_var, width=30).grid(row=0, column=1, sticky=tk.W, padx=10, pady=5)
        
        dialog.columnconfigure(1, weight=1)
        
        def save_quest():
            quest_id = quest_id_var.get().strip()
            if not quest_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ ID –∫–≤–µ—Å—Ç–∞")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
            self.current_requirements[index] = {
                "questId": quest_id,
                "type": "QuestComplete"
            }
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.load_requirements(self.current_requirements)
            dialog.destroy()
        
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_quest).grid(row=1, column=0, padx=10, pady=10)
        ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).grid(row=1, column=1, padx=10, pady=10)
    
    def remove_requirement(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        selection = self.requirements_tree.selection()
        if selection:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            selected_item = selection[0]
            item_index = self.requirements_tree.index(selected_item)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            del self.current_requirements[item_index]
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.load_requirements(self.current_requirements)
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def save_recipe(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–∞"""
        if self.current_recipe_index < 0:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
            updated_recipe = {
                "_id": self.recipe_id_var.get().strip(),
                "areaType": self._extract_area_type_from_display(),
                "continuous": self.continuous_var.get(),
                "count": int(self.count_var.get()) if self.count_var.get() else 1,
                "endProduct": self.end_product_var.get().strip(),
                "isCodeProduction": False,
                "isEncoded": self.is_encoded_var.get(),
                "locked": self.locked_var.get(),
                "needFuelForAllProductionTime": self.need_fuel_var.get(),
                "productionLimitCount": 0,
                "productionTime": int(self.production_time_var.get()) if self.production_time_var.get() else 0,
                "requirements": self.current_requirements
            }
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
            self.recipes[self.current_recipe_index] = updated_recipe
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            self.populate_recipes_tree()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    
    def cancel_changes(self):
        """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if self.current_recipe_index >= 0:
            recipe = self.recipes[self.current_recipe_index]
            self.load_recipe_to_form(recipe)
    
    def add_recipe(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ MongoDB ObjectId
        new_id = self._generate_next_recipe_id()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        existing_ids = {recipe.get('_id', '') for recipe in self.recipes}
        if new_id in existing_ids:
            print(f"ERROR: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID {new_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤!")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_id}")
            return
        
        print(f"INFO: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å ID: {new_id}")
        
        new_recipe = {
            "_id": new_id,
            "areaType": 10,  # –í–µ—Ä—Å—Ç–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "continuous": False,
            "count": 1,
            "endProduct": "",
            "isCodeProduction": False,
            "isEncoded": False,
            "locked": False,
            "needFuelForAllProductionTime": False,
            "productionLimitCount": 0,
            "productionTime": 0,
            "requirements": []
        }
        
        self.recipes.append(new_recipe)
        self.current_recipe_index = len(self.recipes) - 1
        self.load_recipe_to_form(new_recipe)
        self.populate_recipes_tree()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
    
    def delete_recipe(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞"""
        if self.current_recipe_index < 0:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç?"):
            del self.recipes[self.current_recipe_index]
            self.current_recipe_index = -1
            self.populate_recipes_tree()
            
            # –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
            self.recipe_id_var.set("")
            self.end_product_var.set("")
            self.count_var.set("1")
            self.production_time_var.set("0")
            self.area_type_var.set("")
            self.continuous_var.set(False)
            self.locked_var.set(False)
            self.need_fuel_var.set(False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
            self.update_area_type_display()
            self.is_encoded_var.set(False)
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            for item in self.requirements_tree.get_children():
                self.requirements_tree.delete(item)
            self.current_requirements = []
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω")
    
    def duplicate_recipe(self):
        """–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞"""
        if self.current_recipe_index < 0:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        original_recipe = self.recipes[self.current_recipe_index].copy()
        new_id = self._generate_next_recipe_id()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        existing_ids = {recipe.get('_id', '') for recipe in self.recipes}
        if new_id in existing_ids:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_id}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —Å –Ω–æ–≤—ã–º ID
        new_recipe = original_recipe.copy()
        new_recipe["_id"] = new_id
        
        # –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        new_recipe["requirements"] = [req.copy() for req in original_recipe.get("requirements", [])]
        
        self.recipes.append(new_recipe)
        self.current_recipe_index = len(self.recipes) - 1
        self.load_recipe_to_form(new_recipe)
        self.populate_recipes_tree()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ—Ü–µ–ø—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω")
    
    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            self.production_data['recipes'] = self.recipes
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_file = self.production_file.with_suffix('.json.backup')
            if self.production_file.exists():
                import shutil
                shutil.copy2(self.production_file, backup_file)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º orjson
            with open(self.production_file, 'wb') as f:
                f.write(json.dumps(self.production_data, option=json.OPT_INDENT_2))
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.production_file}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∫ –æ–∫–Ω—É
        self.parent.bind('<Control-c>', self.copy_text)
        self.parent.bind('<Control-v>', self.paste_text)
        self.parent.bind('<Control-x>', self.cut_text)
        self.parent.bind('<Control-a>', self.select_all_text)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–∞–±–ª–∏—Ü–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        self.requirements_tree.bind('<Control-c>', self.copy_text)
        self.requirements_tree.bind('<Control-v>', self.paste_text)
        self.requirements_tree.bind('<Control-x>', self.cut_text)
        self.requirements_tree.bind('<Control-a>', self.select_all_text)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –¥–µ—Ä–µ–≤—É —Ä–µ—Ü–µ–ø—Ç–æ–≤
        self.recipes_tree.bind('<Control-c>', self.copy_text)
        self.recipes_tree.bind('<Control-v>', self.paste_text)
        self.recipes_tree.bind('<Control-x>', self.cut_text)
        self.recipes_tree.bind('<Control-a>', self.select_all_text)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—è–º –≤–≤–æ–¥–∞
        for widget in [self.end_product_var, self.production_time_var, self.area_type_var]:
            if hasattr(widget, 'widget'):
                widget.widget.bind('<Control-c>', self.copy_text)
                widget.widget.bind('<Control-v>', self.paste_text)
                widget.widget.bind('<Control-x>', self.cut_text)
                widget.widget.bind('<Control-a>', self.select_all_text)
    
    def copy_text(self, event=None):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            widget = event.widget
            if hasattr(widget, 'get'):
                # –î–ª—è Entry –∏ Text –≤–∏–¥–∂–µ—Ç–æ–≤
                if hasattr(widget, 'selection_get'):
                    selected_text = widget.selection_get()
                    self.parent.clipboard_clear()
                    self.parent.clipboard_append(selected_text)
                elif hasattr(widget, 'get'):
                    # –î–ª—è Entry –≤–∏–¥–∂–µ—Ç–æ–≤
                    if hasattr(widget, 'selection_range'):
                        start, end = widget.selection_range()
                        if start != end:
                            selected_text = widget.get()[start:end]
                            self.parent.clipboard_clear()
                            self.parent.clipboard_append(selected_text)
            elif hasattr(widget, 'selection'):
                # –î–ª—è Listbox
                selection = widget.curselection()
                if selection:
                    selected_text = widget.get(selection[0])
                    self.parent.clipboard_clear()
                    self.parent.clipboard_append(selected_text)
            elif hasattr(widget, 'selection'):
                # –î–ª—è Treeview
                selection = widget.selection()
                if selection:
                    item = widget.item(selection[0])
                    if 'values' in item:
                        selected_text = ' '.join(str(v) for v in item['values'])
                        self.parent.clipboard_clear()
                        self.parent.clipboard_append(selected_text)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    def paste_text(self, event=None):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            widget = event.widget
            if hasattr(widget, 'insert'):
                # –î–ª—è Entry –∏ Text –≤–∏–¥–∂–µ—Ç–æ–≤
                clipboard_text = self.parent.clipboard_get()
                if hasattr(widget, 'selection_range'):
                    # –î–ª—è Entry –≤–∏–¥–∂–µ—Ç–æ–≤
                    start, end = widget.selection_range()
                    widget.delete(start, end)
                    widget.insert(start, clipboard_text)
                else:
                    # –î–ª—è Text –≤–∏–¥–∂–µ—Ç–æ–≤
                    widget.insert(tk.INSERT, clipboard_text)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    def cut_text(self, event=None):
        """–í—ã—Ä–µ–∑–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            widget = event.widget
            if hasattr(widget, 'get') and hasattr(widget, 'selection_range'):
                # –î–ª—è Entry –≤–∏–¥–∂–µ—Ç–æ–≤
                start, end = widget.selection_range()
                if start != end:
                    selected_text = widget.get()[start:end]
                    self.parent.clipboard_clear()
                    self.parent.clipboard_append(selected_text)
                    widget.delete(start, end)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    def select_all_text(self, event=None):
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            widget = event.widget
            if hasattr(widget, 'selection_range'):
                # –î–ª—è Entry –≤–∏–¥–∂–µ—Ç–æ–≤
                widget.selection_range(0, tk.END)
            elif hasattr(widget, 'tag_add'):
                # –î–ª—è Text –≤–∏–¥–∂–µ—Ç–æ–≤
                widget.tag_add(tk.SEL, "1.0", tk.END)
                widget.mark_set(tk.INSERT, "1.0")
                widget.see(tk.INSERT)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    def _generate_next_recipe_id(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MongoDB ObjectId (24 —Å–∏–º–≤–æ–ª–∞ hex)"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID
        existing_ids = set()
        for recipe in self.recipes:
            recipe_id = recipe.get('_id', '')
            if recipe_id and len(recipe_id) == 24:
                existing_ids.add(recipe_id)
        
        print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(existing_ids)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID —Ä–µ—Ü–µ–ø—Ç–æ–≤")
        if len(existing_ids) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ
            print(f"DEBUG: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID: {sorted(existing_ids)}")
        
        # –ï—Å–ª–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π ID
        if not existing_ids:
            return "600000000000000000000000"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ ID –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
        import random
        max_attempts = 10000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
        for attempt in range(max_attempts):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ 24-—Å–∏–º–≤–æ–ª—å–Ω–æ–µ hex —á–∏—Å–ª–æ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å 6
            random_part = ''.join(random.choices('0123456789abcdef', k=23))
            new_id = f"6{random_part}"
            
            if new_id not in existing_ids:
                print(f"DEBUG: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {new_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                return new_id
        
        print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é
        import time
        timestamp = int(time.time() * 1000000)
        random_offset = random.randint(1, 999999)
        timestamp_hex = f"{(timestamp + random_offset):024x}"
        
        # –ï—Å–ª–∏ –∏ timestamp –Ω–µ —É–Ω–∏–∫–∞–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –±–æ–ª—å—à–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        counter = 0
        while timestamp_hex in existing_ids and counter < 1000:
            counter += 1
            timestamp_hex = f"{(timestamp + random_offset + counter):024x}"
        
        print(f"DEBUG: –§–∏–Ω–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ timestamp: {timestamp_hex}")
        return timestamp_hex
    
    def _extract_area_type_from_display(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        area_display = self.area_type_var.get().strip()
        if not area_display:
            return 0
        
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç "7: –ú–µ–¥–±–ª–æ–∫", –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä
            if ':' in area_display:
                return int(area_display.split(':')[0])
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
            else:
                return int(area_display)
        except (ValueError, IndexError):
            return 0

    def open_scav_recipes(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö"""
        try:
            from scav_recipes_dialog import ScavRecipesDialog
            dialog = ScavRecipesDialog(self.parent, self.server_path, self.items_cache)
        except ImportError:
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –¥–∏–∞–ª–æ–≥
            self._create_simple_scav_dialog()
    
    def _create_simple_scav_dialog(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö")
        dialog.geometry("800x600")
        dialog.minsize(600, 400)
        dialog.resizable(True, True)
        dialog.transient(self.parent)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (800 // 2)
        y = (dialog.winfo_screenheight() // 2) - (600 // 2)
        dialog.geometry(f"800x600+{x}+{y}")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(dialog, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö (Scav Recipes)", font=("Arial", 14, "bold"))
        title_label.pack(pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = ttk.Label(dialog, text="–ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è scavRecipes.", 
                              font=("Arial", 10))
        info_label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(dialog, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy).pack(pady=20)


class ItemSearchDialog:
    """–û–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ—Ü–µ–ø—Ç"""
    
    def __init__(self, parent, items_cache, callback, preselected_item_id=None):
        self.parent = parent
        self.items_cache = items_cache
        self.callback = callback
        self.search_results = []
        self.preselected_item_id = preselected_item_id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞")
        self.dialog.geometry("800x600")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        x = parent.winfo_rootx() + 50
        y = parent.winfo_rooty() + 50
        self.dialog.geometry(f"+{x}+{y}")
        
        self.create_widgets()
        self.setup_hotkeys()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.dialog)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–æ–ª—è –ø–æ–∏—Å–∫–∞
        search_frame = ttk.LabelFrame(main_frame, text="–ü–æ–∏—Å–∫", padding=10)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–æ–ª–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞
        ttk.Label(search_frame, text="ID –ø—Ä–µ–¥–º–µ—Ç–∞:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5), pady=5)
        self.id_var = tk.StringVar()
        self.id_entry = ttk.Entry(search_frame, textvariable=self.id_var, width=30)
        self.id_entry.grid(row=0, column=1, padx=(0, 10), pady=5, sticky=(tk.W, tk.E))
        
        # –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        ttk.Label(search_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:").grid(row=1, column=0, sticky=tk.W, padx=(0, 5), pady=5)
        self.name_var = tk.StringVar()
        self.name_entry = ttk.Entry(search_frame, textvariable=self.name_var, width=30)
        self.name_entry.grid(row=1, column=1, padx=(0, 10), pady=5, sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_btn = ttk.Button(search_frame, text="–ü–æ–∏—Å–∫", command=self.search_items)
        search_btn.grid(row=0, column=2, rowspan=2, padx=(10, 0), pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª–µ–π –ø–æ–∏—Å–∫–∞
        search_frame.columnconfigure(1, weight=1)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", padding=10)
        results_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ('ID', 'Name', 'Prefab')
        self.results_tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        self.results_tree.heading('ID', text='ID –ø—Ä–µ–¥–º–µ—Ç–∞', command=lambda: self.sort_results_by_column('ID'))
        self.results_tree.heading('Name', text='–ù–∞–∑–≤–∞–Ω–∏–µ', command=lambda: self.sort_results_by_column('Name'))
        self.results_tree.heading('Prefab', text='–¢–∏–ø –ø—Ä–µ—Ñ–∞–±–∞', command=lambda: self.sort_results_by_column('Prefab'))
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_sort_column = None
        self.results_sort_reverse = False
        
        self.results_tree.column('ID', width=120, minwidth=100)
        self.results_tree.column('Name', width=300, minwidth=200)
        self.results_tree.column('Prefab', width=200, minwidth=150)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.results_tree.yview)
        h_scrollbar = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ Treeview –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤
        self.results_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X)
        
        ttk.Button(buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_selected_item).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=self.dialog.destroy).pack(side=tk.LEFT)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.name_entry.bind('<Return>', lambda e: self.search_items())
        self.id_entry.bind('<Return>', lambda e: self.search_items())
        self.results_tree.bind('<Double-1>', lambda e: self.add_selected_item())
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç
        if self.preselected_item_id and self.items_cache:
            self.id_var.set(self.preselected_item_id)
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            item_name = self.items_cache.get_item_short_name(self.preselected_item_id)
            if item_name and not item_name.startswith("Unknown"):
                self.name_var.set(item_name)
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            self.search_items()
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.load_all_items()
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.dialog.bind('<Control-f>', lambda e: self.search_items())
        self.dialog.bind('<Escape>', lambda e: self.dialog.destroy())
        self.results_tree.bind('<Control-a>', lambda e: self.select_all_results())
    
    def search_items(self):
        """–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        name_query = self.name_var.get().strip()
        id_query = self.id_var.get().strip()
        
        self.search_results = []
        
        if not self.items_cache:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if name_query:
            self.search_by_name(name_query)
        elif id_query:
            self.search_by_id(id_query)
        else:
            # –ï—Å–ª–∏ –æ–±–∞ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            self.load_all_items()
    
    def search_by_name(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞"""
        query_lower = query.lower()
        exact_matches = []
        partial_matches = []
        
        for item_id, item_data in self.items_cache.full_cache.items():
            if not item_data:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            names = []
            if 'locale' in item_data and item_data['locale']:
                if item_data['locale'].get('Name'):
                    names.append(item_data['locale']['Name'].lower())
                if item_data['locale'].get('ShortName'):
                    names.append(item_data['locale']['ShortName'].lower())
            
            if 'props' in item_data:
                if item_data['props'].get('Name'):
                    names.append(item_data['props']['Name'].lower())
                if item_data['props'].get('ShortName'):
                    names.append(item_data['props']['ShortName'].lower())
            
            if 'name' in item_data:
                names.append(item_data['name'].lower())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for name in names:
                if name == query_lower:
                    exact_matches.append((item_id, item_data))
                    break
                elif query_lower in name:
                    partial_matches.append((item_id, item_data))
                    break
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        self.search_results = exact_matches + partial_matches
        self.display_results()
    
    def search_by_id(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ ID –ø—Ä–µ–¥–º–µ—Ç–∞"""
        query_lower = query.lower()
        
        for item_id, item_data in self.items_cache.full_cache.items():
            if not item_data:
                continue
                
            if query_lower in item_id.lower():
                self.search_results.append((item_id, item_data))
        
        self.display_results()
    
    def load_all_items(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        self.search_results = []
        
        for item_id, item_data in self.items_cache.full_cache.items():
            if not item_data:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ
            has_name = False
            if 'locale' in item_data and item_data['locale']:
                if item_data['locale'].get('Name') or item_data['locale'].get('ShortName'):
                    has_name = True
            elif 'props' in item_data:
                if item_data['props'].get('Name') or item_data['props'].get('ShortName'):
                    has_name = True
            elif 'name' in item_data:
                has_name = True
            
            if has_name:
                self.search_results.append((item_id, item_data))
        
        self.display_results()
    
    def display_results(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        preselected_item = None
        for item_id, item_data in self.search_results:
            name = self.items_cache.get_item_short_name(item_id)
            prefab_type = self.items_cache.get_item_prefab_type(item_id)
            
            item = self.results_tree.insert('', 'end', values=(
                item_id,
                name,
                prefab_type
            ))
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            if self.preselected_item_id and item_id == self.preselected_item_id:
                preselected_item = item
        
        # –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        if preselected_item:
            self.results_tree.selection_set(preselected_item)
            self.results_tree.see(preselected_item)
    
    def add_selected_item(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        selection = self.results_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        item_index = self.results_tree.index(selection[0])
        if 0 <= item_index < len(self.search_results):
            item_id, item_data = self.search_results[item_index]
            self.callback(item_id)
            self.dialog.destroy()
    
    def select_all_results(self):
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        for item in self.results_tree.get_children():
            self.results_tree.selection_add(item)
    
    def sort_results_by_column(self, column):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ"""
        # –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É –∂–µ –∫–æ–ª–æ–Ω–∫—É, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if self.results_sort_column == column:
            self.results_sort_reverse = not self.results_sort_reverse
        else:
            self.results_sort_column = column
            self.results_sort_reverse = False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ä–µ–≤–∞
        items = []
        for item in self.results_tree.get_children():
            values = self.results_tree.item(item)['values']
            items.append((item, values))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        column_index = {'ID': 0, 'Name': 1, 'Prefab': 2}[column]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        def sort_key(item):
            value = item[1][column_index]
            return str(value).lower()
        
        items.sort(key=sort_key, reverse=self.results_sort_reverse)
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item, values in items:
            self.results_tree.move(item, '', 'end')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for col in ['ID', 'Name', 'Prefab']:
            if col == column:
                arrow = " ‚Üì" if self.results_sort_reverse else " ‚Üë"
                self.results_tree.heading(col, text=f"{col}{arrow}")
            else:
                self.results_tree.heading(col, text=col)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    root = tk.Tk()
    server_path = Path(__file__).parent.parent
    app = CraftManager(root, server_path)
    root.mainloop()

if __name__ == "__main__":
    main()
