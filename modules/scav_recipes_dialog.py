#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Scav Recipes Dialog - –î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö
"""

import tkinter as tk
from tkinter import ttk, messagebox
import orjson as json
from pathlib import Path
from typing import Dict, List, Any, Optional
import random
import string

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
try:
    from items_cache import ItemsCache
    from context_menus import setup_context_menus_for_module
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
    import sys
    modules_path = str(Path(__file__).parent)
    if modules_path not in sys.path:
        sys.path.insert(0, modules_path)
    
    from items_cache import ItemsCache
    from context_menus import setup_context_menus_for_module

class ScavRecipesDialog:
    """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö"""
    
    def __init__(self, parent, server_path: Path, items_cache: Optional[ItemsCache] = None):
        self.parent = parent
        self.server_path = server_path
        self.items_cache = items_cache
        self.production_file = server_path / "database" / "hideout" / "production.json"
        
        # –î–∞–Ω–Ω—ã–µ
        self.production_data = {}
        self.scav_recipes = []
        self.current_recipe_index = -1
        self.recipe_modified = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö (Scav Recipes)")
        self.dialog.geometry("1200x900")
        self.dialog.minsize(1000, 800)
        self.dialog.resizable(True, True)
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        self.center_dialog()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.load_data()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω—é
        setup_context_menus_for_module(self)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.dialog.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def center_dialog(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (1200 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (900 // 2)
        self.dialog.geometry(f"1200x900+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üéí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö (Scav Recipes)", font=("Arial", 14, "bold"))
        title_label.pack(pady=(0, 20))
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        top_frame = ttk.LabelFrame(main_frame, text="–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —è—â–∏–∫–∞ –¥–∏–∫–∏—Ö", padding="10")
        top_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –î–µ—Ä–µ–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        tree_frame = ttk.Frame(top_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        columns = ('ID', '–í—Ä–µ–º—è', '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è', '–ü—Ä–æ–¥—É–∫—Ç—ã')
        self.recipes_tree = ttk.Treeview(tree_frame, columns=columns, show='headings', height=12)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.recipes_tree.heading('ID', text='ID')
        self.recipes_tree.heading('–í—Ä–µ–º—è', text='–í—Ä–µ–º—è (—Å–µ–∫)')
        self.recipes_tree.heading('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è', text='–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è')
        self.recipes_tree.heading('–ü—Ä–æ–¥—É–∫—Ç—ã', text='–ü—Ä–æ–¥—É–∫—Ç—ã')
        
        self.recipes_tree.column('ID', width=200)
        self.recipes_tree.column('–í—Ä–µ–º—è', width=80)
        self.recipes_tree.column('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è', width=400)
        self.recipes_tree.column('–ü—Ä–æ–¥—É–∫—Ç—ã', width=200)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –¥–µ—Ä–µ–≤–∞
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.recipes_tree.yview)
        self.recipes_tree.configure(yscrollcommand=tree_scrollbar.set)
        
        self.recipes_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(top_frame)
        buttons_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", command=self.add_recipe).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", command=self.delete_recipe).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å", command=self.duplicate_recipe).pack(side=tk.LEFT)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        bottom_frame = ttk.LabelFrame(main_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞", padding="10")
        bottom_frame.pack(fill=tk.BOTH, expand=True)
        
        # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
        self.create_edit_form(bottom_frame)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.recipes_tree.bind('<<TreeviewSelect>>', self.on_recipe_select)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–Ω–∏–∑—É –¥–∏–∞–ª–æ–≥–∞
        save_buttons_frame = ttk.Frame(main_frame)
        save_buttons_frame.pack(fill=tk.X, pady=(20, 0))
        
        ttk.Button(save_buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", command=self.save_all_data).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(save_buttons_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=self.on_closing).pack(side=tk.RIGHT)
    
    def create_edit_form(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ - ID –∏ –≤—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        top_row = ttk.Frame(parent)
        top_row.pack(fill=tk.X, pady=(0, 10))
        
        # ID —Ä–µ—Ü–µ–ø—Ç–∞ (–ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
        id_frame = ttk.Frame(top_row)
        id_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        ttk.Label(id_frame, text="ID —Ä–µ—Ü–µ–ø—Ç–∞:").pack(anchor=tk.W, pady=(0, 5))
        self.recipe_id_var = tk.StringVar()
        self.recipe_id_var.trace('w', self.on_field_change)
        ttk.Entry(id_frame, textvariable=self.recipe_id_var).pack(fill=tk.X)
        
        # –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
        time_frame = ttk.Frame(top_row)
        time_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        ttk.Label(time_frame, text="–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (—Å–µ–∫):").pack(anchor=tk.W, pady=(0, 5))
        self.production_time_var = tk.IntVar()
        self.production_time_var.trace('w', self.on_field_change)
        ttk.Entry(time_frame, textvariable=self.production_time_var).pack(fill=tk.X)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        content_frame = ttk.Frame(parent)
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        left_column = ttk.LabelFrame(content_frame, text="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", padding="5")
        left_column.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        req_frame = ttk.Frame(left_column)
        req_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 5))
        
        req_columns = ('ID', '–¢–∏–ø', '–ü—Ä–µ–¥–º–µ—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        self.requirements_tree = ttk.Treeview(req_frame, columns=req_columns, show='headings', height=8)
        
        self.requirements_tree.heading('ID', text='ID')
        self.requirements_tree.heading('–¢–∏–ø', text='–¢–∏–ø')
        self.requirements_tree.heading('–ü—Ä–µ–¥–º–µ—Ç', text='–ü—Ä–µ–¥–º–µ—Ç')
        self.requirements_tree.heading('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', text='–ö–æ–ª-–≤–æ')
        
        self.requirements_tree.column('ID', width=200)
        self.requirements_tree.column('–¢–∏–ø', width=60)
        self.requirements_tree.column('–ü—Ä–µ–¥–º–µ—Ç', width=150)
        self.requirements_tree.column('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', width=60)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        req_scrollbar = ttk.Scrollbar(req_frame, orient=tk.VERTICAL, command=self.requirements_tree.yview)
        self.requirements_tree.configure(yscrollcommand=req_scrollbar.set)
        
        self.requirements_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        req_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
        self.requirements_tree.bind('<<TreeviewSelect>>', self.on_requirement_change)
        self.requirements_tree.bind('<Button-1>', self.on_requirement_change)
        self.requirements_tree.bind('<Key>', self.on_requirement_change)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        req_buttons_frame = ttk.Frame(left_column)
        req_buttons_frame.pack(fill=tk.X)
        
        ttk.Button(req_buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_requirement).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(req_buttons_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_requirement).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(req_buttons_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.remove_requirement).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
        save_recipe_frame = ttk.Frame(left_column)
        save_recipe_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(save_recipe_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", command=self.save_recipe, 
                  style="Accent.TButton").pack(fill=tk.X)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        right_column = ttk.LabelFrame(content_frame, text="–ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏", padding="5")
        right_column.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarities = ['Common', 'Rare', 'Superrare']
        self.rarity_vars = {}
        
        for i, rarity in enumerate(rarities):
            rarity_frame = ttk.Frame(right_column)
            rarity_frame.pack(fill=tk.X, pady=(0, 5))
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏
            ttk.Label(rarity_frame, text=rarity, font=("Arial", 9, "bold")).pack(anchor=tk.W, pady=(0, 2))
            
            # –°—Ç—Ä–æ–∫–∞ —Å –º–∏–Ω–∏–º—É–º–æ–º –∏ –º–∞–∫—Å–∏–º—É–º–æ–º
            minmax_frame = ttk.Frame(rarity_frame)
            minmax_frame.pack(fill=tk.X)
            
            # –ú–∏–Ω–∏–º—É–º
            ttk.Label(minmax_frame, text="–ú–∏–Ω:").pack(side=tk.LEFT, padx=(0, 5))
            min_var = tk.IntVar()
            min_var.trace('w', self.on_field_change)
            ttk.Entry(minmax_frame, textvariable=min_var, width=8).pack(side=tk.LEFT, padx=(0, 10))
            
            # –ú–∞–∫—Å–∏–º—É–º
            ttk.Label(minmax_frame, text="–ú–∞–∫—Å:").pack(side=tk.LEFT, padx=(0, 5))
            max_var = tk.IntVar()
            max_var.trace('w', self.on_field_change)
            ttk.Entry(minmax_frame, textvariable=max_var, width=8).pack(side=tk.LEFT)
            
            self.rarity_vars[rarity] = {'min': min_var, 'max': max_var}
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –≤–Ω–∏–∑—É –¥–∏–∞–ª–æ–≥–∞
    
    def on_field_change(self, *args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö —Ñ–æ—Ä–º—ã"""
        if self.current_recipe_index >= 0:
            self.recipe_modified = True
            self.update_save_button()
    
    def on_requirement_change(self, *args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö"""
        if self.current_recipe_index >= 0:
            self.recipe_modified = True
            self.update_save_button()
    
    def update_save_button(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        for widget in self.dialog.winfo_children():
            if isinstance(widget, ttk.Frame):
                for child in widget.winfo_children():
                    if isinstance(child, ttk.Frame):
                        for button in child.winfo_children():
                            if isinstance(button, ttk.Button) and "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç" in str(button.cget('text')):
                                if self.recipe_modified:
                                    button.configure(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç *")
                                else:
                                    button.configure(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç")
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.production_file.exists():
                with open(self.production_file, 'rb') as f:
                    self.production_data = json.loads(f.read())
                self.scav_recipes = self.production_data.get('scavRecipes', [])
            else:
                self.scav_recipes = []
            
            self.populate_recipes_tree()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            self.scav_recipes = []
    
    def populate_recipes_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.recipes_tree.get_children():
            self.recipes_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        for i, recipe in enumerate(self.scav_recipes):
            recipe_id = recipe.get('_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            production_time = recipe.get('productionTime', 0)
            
            # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            requirements = recipe.get('requirements', [])
            req_text = ""
            if requirements:
                req_items = []
                for req in requirements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–º–µ—Ç–∞
                    template_id = req.get('templateId', '')
                    count = req.get('count', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                    item_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    if self.items_cache and template_id:
                        item_name = self.items_cache.get_item_short_name(template_id)
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                        if len(item_name) > 20:
                            item_name = item_name[:17] + "..."
                    
                    req_items.append(f"{item_name} x{count}")
                
                req_text = ", ".join(req_items)
                if len(requirements) > 3:
                    req_text += f" (+{len(requirements) - 3} –µ—â–µ)"
            else:
                req_text = "–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
            
            # –ü—Ä–æ–¥—É–∫—Ç—ã
            end_products = recipe.get('endProducts', {})
            products_text = ""
            for rarity, values in end_products.items():
                min_val = values.get('min', 0)
                max_val = values.get('max', 0)
                if min_val > 0 or max_val > 0:
                    products_text += f"{rarity}: {min_val}-{max_val}, "
            products_text = products_text.rstrip(", ")
            
            self.recipes_tree.insert('', 'end', values=(recipe_id, production_time, req_text, products_text))
    
    def on_recipe_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞"""
        selection = self.recipes_tree.selection()
        if not selection:
            return
        
        item = self.recipes_tree.item(selection[0])
        recipe_id = item['values'][0]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ü–µ–ø—Ç –ø–æ ID
        for i, recipe in enumerate(self.scav_recipes):
            if recipe.get('_id') == recipe_id:
                self.current_recipe_index = i
                self.load_recipe_to_form(recipe)
                break
    
    def load_recipe_to_form(self, recipe):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.recipe_modified = False
        
        # ID —Ä–µ—Ü–µ–ø—Ç–∞
        self.recipe_id_var.set(recipe.get('_id', ''))
        
        # –í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        self.production_time_var.set(recipe.get('productionTime', 0))
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        for item in self.requirements_tree.get_children():
            self.requirements_tree.delete(item)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        requirements = recipe.get('requirements', [])
        for req in requirements:
            req_type = req.get('type', 'Item')
            template_id = req.get('templateId', '')
            count = req.get('count', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ç–∏–ø –ø—Ä–µ—Ñ–∞–±–∞
            item_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            prefab_type = ""
            if self.items_cache and template_id:
                item_name = self.items_cache.get_item_short_name(template_id)
                prefab_type = self.items_cache.get_item_prefab_type(template_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ –∫—Ä–∞—Ñ—Ç–∞
            if prefab_type:
                item_display = f"{item_name} ({prefab_type})"
            else:
                item_display = f"{item_name} ({template_id})"
            
            self.requirements_tree.insert('', 'end', values=(template_id, req_type, item_display, count))
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        end_products = recipe.get('endProducts', {})
        for rarity in ['Common', 'Rare', 'Superrare']:
            rarity_data = end_products.get(rarity, {})
            self.rarity_vars[rarity]['min'].set(rarity_data.get('min', 0))
            self.rarity_vars[rarity]['max'].set(rarity_data.get('max', 0))
    
    def add_recipe(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        new_id = self._generate_recipe_id()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
        new_recipe = {
            "_id": new_id,
            "endProducts": {
                "Common": {"max": 0, "min": 0},
                "Rare": {"max": 0, "min": 0},
                "Superrare": {"max": 0, "min": 0}
            },
            "productionTime": 3600,
            "requirements": []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        self.scav_recipes.append(new_recipe)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
        self.populate_recipes_tree()
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
        for item in self.recipes_tree.get_children():
            if self.recipes_tree.item(item)['values'][0] == new_id:
                self.recipes_tree.selection_set(item)
                self.recipes_tree.see(item)
                break
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ñ–æ—Ä–º—É
        self.load_recipe_to_form(new_recipe)
    
    def delete_recipe(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
        selection = self.recipes_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        item = self.recipes_tree.item(selection[0])
        recipe_id = item['values'][0]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç {recipe_id}?"):
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            self.scav_recipes = [r for r in self.scav_recipes if r.get('_id') != recipe_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
            self.populate_recipes_tree()
            
            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            self.clear_form()
    
    def duplicate_recipe(self):
        """–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
        selection = self.recipes_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        item = self.recipes_tree.item(selection[0])
        recipe_id = item['values'][0]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ü–µ–ø—Ç
        original_recipe = None
        for recipe in self.scav_recipes:
            if recipe.get('_id') == recipe_id:
                original_recipe = recipe
                break
        
        if original_recipe:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å –Ω–æ–≤—ã–º ID
            new_recipe = original_recipe.copy()
            new_recipe['_id'] = self._generate_recipe_id()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            self.scav_recipes.append(new_recipe)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
            self.populate_recipes_tree()
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
            for item in self.recipes_tree.get_children():
                if self.recipes_tree.item(item)['values'][0] == new_recipe['_id']:
                    self.recipes_tree.selection_set(item)
                    self.recipes_tree.see(item)
                    break
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ñ–æ—Ä–º—É
            self.load_recipe_to_form(new_recipe)
    
    def add_requirement(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å –ø–æ–∏—Å–∫–æ–º
        dialog = tk.Toplevel(self.dialog)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ")
        dialog.geometry("600x500")
        dialog.transient(self.dialog)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (dialog.winfo_screenheight() // 2) - (500 // 2)
        dialog.geometry(f"600x500+{x}+{y}")
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        ttk.Label(main_frame, text="–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞:", font=("Arial", 10, "bold")).pack(anchor=tk.W, pady=(0, 5))
        
        search_frame = ttk.Frame(main_frame)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        
        search_var = tk.StringVar()
        search_var.trace('w', lambda *args: self.search_items(search_var.get(), results_tree))
        search_entry = ttk.Entry(search_frame, textvariable=search_var, width=40)
        search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        ttk.Button(search_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=lambda: search_var.set("")).pack(side=tk.RIGHT)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        ttk.Label(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:").pack(anchor=tk.W, pady=(10, 5))
        
        results_frame = ttk.Frame(main_frame)
        results_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_columns = ('ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø –ø—Ä–µ—Ñ–∞–±–∞')
        results_tree = ttk.Treeview(results_frame, columns=results_columns, show='headings', height=8)
        
        results_tree.heading('ID', text='ID')
        results_tree.heading('–ù–∞–∑–≤–∞–Ω–∏–µ', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        results_tree.heading('–¢–∏–ø –ø—Ä–µ—Ñ–∞–±–∞', text='–¢–∏–ø –ø—Ä–µ—Ñ–∞–±–∞')
        
        results_tree.column('ID', width=200)
        results_tree.column('–ù–∞–∑–≤–∞–Ω–∏–µ', width=200)
        results_tree.column('–¢–∏–ø –ø—Ä–µ—Ñ–∞–±–∞', width=150)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=results_tree.yview)
        results_tree.configure(yscrollcommand=results_scrollbar.set)
        
        results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        results_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        options_frame = ttk.Frame(main_frame)
        options_frame.pack(fill=tk.X, pady=(10, 0))
        
        # –¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        ttk.Label(options_frame, text="–¢–∏–ø:").pack(side=tk.LEFT, padx=(0, 5))
        type_var = tk.StringVar(value="Item")
        type_combo = ttk.Combobox(options_frame, textvariable=type_var, width=15, state="readonly")
        type_combo['values'] = ('Item', 'Area', 'Tool', 'Quest')
        type_combo.pack(side=tk.LEFT, padx=(0, 20))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ttk.Label(options_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").pack(side=tk.LEFT, padx=(0, 5))
        count_var = tk.IntVar(value=1)
        count_entry = ttk.Entry(options_frame, textvariable=count_var, width=10)
        count_entry.pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(10, 0))
        
        def add_selected_item():
            selection = results_tree.selection()
            if not selection:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
                return
            
            item = results_tree.item(selection[0])
            template_id = item['values'][0]
            count = count_var.get()
            req_type = type_var.get()
            
            if count <= 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ç–∏–ø –ø—Ä–µ—Ñ–∞–±–∞
            item_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            prefab_type = ""
            if self.items_cache and template_id:
                item_name = self.items_cache.get_item_short_name(template_id)
                prefab_type = self.items_cache.get_item_prefab_type(template_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ –∫—Ä–∞—Ñ—Ç–∞
            if prefab_type:
                item_display = f"{item_name} ({prefab_type})"
            else:
                item_display = f"{item_name} ({template_id})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ä–µ–≤–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            self.requirements_tree.insert('', 'end', values=(template_id, req_type, item_display, count))
            
            # –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.on_requirement_change()
            
            dialog.destroy()
        
        ttk.Button(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", command=add_selected_item).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.RIGHT)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        self.search_items("", results_tree)
    
    def search_items(self, search_term, results_tree):
        """–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for item in results_tree.get_children():
            results_tree.delete(item)
        
        if not self.items_cache:
            return
        
        search_term = search_term.lower()
        count = 0
        max_results = 100  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –≤ –∫—ç—à–µ
        for item_id, item_data in self.items_cache.full_cache.items():
            if count >= max_results:
                break
                
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø –ø—Ä–µ—Ñ–∞–±–∞
            item_name = self.items_cache.get_item_short_name(item_id)
            prefab_type = self.items_cache.get_item_prefab_type(item_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            if (search_term in item_name.lower() or 
                search_term in item_id.lower() or 
                search_term in prefab_type.lower()):
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                display_name = item_name
                if len(display_name) > 30:
                    display_name = display_name[:27] + "..."
                
                results_tree.insert('', 'end', values=(item_id, display_name, prefab_type))
                count += 1
    
    def edit_requirement(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        selection = self.requirements_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        item = selection[0]
        values = self.requirements_tree.item(item)['values']
        template_id = values[0]
        req_type = values[1]
        item_display = values[2]
        count = values[3]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dialog = tk.Toplevel(self.dialog)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ")
        dialog.geometry("500x300")
        dialog.transient(self.dialog)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialog.winfo_screenheight() // 2) - (300 // 2)
        dialog.geometry(f"500x300+{x}+{y}")
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # ID –ø—Ä–µ–¥–º–µ—Ç–∞
        ttk.Label(main_frame, text="ID –ø—Ä–µ–¥–º–µ—Ç–∞:").pack(anchor=tk.W, pady=(0, 5))
        id_var = tk.StringVar(value=template_id)
        ttk.Entry(main_frame, textvariable=id_var, width=50).pack(fill=tk.X, pady=(0, 10))
        
        # –¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        ttk.Label(main_frame, text="–¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:").pack(anchor=tk.W, pady=(0, 5))
        type_var = tk.StringVar(value=req_type)
        type_combo = ttk.Combobox(main_frame, textvariable=type_var, width=47, state="readonly")
        type_combo['values'] = ('Item', 'Area', 'Tool', 'Quest')
        type_combo.pack(fill=tk.X, pady=(0, 10))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ttk.Label(main_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").pack(anchor=tk.W, pady=(0, 5))
        count_var = tk.IntVar(value=count)
        ttk.Entry(main_frame, textvariable=count_var, width=50).pack(fill=tk.X, pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X)
        
        def save_changes():
            new_template_id = id_var.get().strip()
            new_type = type_var.get()
            new_count = count_var.get()
            
            if not new_template_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞")
                return
            
            if new_count <= 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            item_name = self.items_cache.get_item_name(new_template_id)
            if not item_name:
                item_name = new_template_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–µ—Ñ–∞–±–∞
            prefab_type = self.items_cache.get_item_prefab_type(new_template_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if prefab_type:
                item_display = f"{item_name} ({prefab_type})"
            else:
                item_display = f"{item_name} ({new_template_id})"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.requirements_tree.item(item, values=(new_template_id, new_type, item_display, new_count))
            
            # –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.on_requirement_change()
            
            dialog.destroy()
        
        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_changes).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.RIGHT)
    
    def remove_requirement(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        selection = self.requirements_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        self.requirements_tree.delete(selection[0])
        
        # –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.on_requirement_change()
    
    def save_recipe(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞"""
        if self.current_recipe_index < 0:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            recipe_id = self.recipe_id_var.get().strip()
            production_time = self.production_time_var.get()
            
            if not recipe_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ—Ü–µ–ø—Ç–∞")
                return
            
            if production_time <= 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            requirements = []
            for item in self.requirements_tree.get_children():
                values = self.requirements_tree.item(item)['values']
                template_id = values[0]  # ID —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                req_type = values[1]     # –¢–∏–ø —Ç–µ–ø–µ—Ä—å –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü
                item_display = values[2] # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                count = values[3]        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ø–µ—Ä—å —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü
                
                requirements.append({
                    "count": count,
                    "isEncoded": False,
                    "isFunctional": False,
                    "isSpawnedInSession": False,
                    "templateId": template_id,
                    "type": req_type
                })
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
            end_products = {}
            for rarity in ['Common', 'Rare', 'Superrare']:
                min_val = self.rarity_vars[rarity]['min'].get()
                max_val = self.rarity_vars[rarity]['max'].get()
                end_products[rarity] = {"max": max_val, "min": min_val}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
            self.scav_recipes[self.current_recipe_index] = {
                "_id": recipe_id,
                "endProducts": end_products,
                "productionTime": production_time,
                "requirements": requirements
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
            self.populate_recipes_tree()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.recipe_modified = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.update_save_button()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    def cancel_changes(self):
        """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if self.current_recipe_index >= 0 and self.current_recipe_index < len(self.scav_recipes):
            recipe = self.scav_recipes[self.current_recipe_index]
            self.load_recipe_to_form(recipe)
        else:
            self.clear_form()
    
    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã"""
        self.recipe_id_var.set("")
        self.production_time_var.set(0)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        for item in self.requirements_tree.get_children():
            self.requirements_tree.delete(item)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        for rarity in ['Common', 'Rare', 'Superrare']:
            self.rarity_vars[rarity]['min'].set(0)
            self.rarity_vars[rarity]['max'].set(0)
        
        self.current_recipe_index = -1
    
    def _generate_recipe_id(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ä–µ—Ü–µ–ø—Ç–∞"""
        while True:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 24-—Å–∏–º–≤–æ–ª—å–Ω—ã–π hex ID
            recipe_id = ''.join(random.choices(string.hexdigits.lower(), k=24))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if not any(r.get('_id') == recipe_id for r in self.scav_recipes):
                return recipe_id
    
    def save_all_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.production_data['scavRecipes'] = self.scav_recipes
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.production_file, 'wb') as f:
                f.write(json.dumps(self.production_data, option=json.OPT_INDENT_2))
            
            return True
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return False
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º?"):
            if self.save_all_data():
                self.dialog.destroy()
        else:
            self.dialog.destroy()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    root = tk.Tk()
    root.withdraw()
    
    server_path = Path(__file__).parent.parent
    dialog = ScavRecipesDialog(root, server_path)
    
    root.mainloop()

if __name__ == "__main__":
    main()
