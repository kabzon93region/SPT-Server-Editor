#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Items Analyzer - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ items.json
"""

import orjson as json
from pathlib import Path
from typing import Dict, List, Any, Set, Counter, Tuple
from collections import defaultdict
import re

class ItemsAnalyzer:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    
    def __init__(self, server_path: Path):
        self.server_path = server_path
        self.items_file = server_path / "database" / "templates" / "items.json"
        self.cache_file = server_path / "modules" / "items_analysis_cache.json"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_results = {}
        
    def analyze_items(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            items_data = self.load_items_data()
            if not items_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                return None
            
            print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(items_data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
            type_analysis = self.analyze_item_types(items_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∞–±—ã
            print("üé® –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∞–±—ã...")
            prefab_analysis = self.analyze_prefabs(items_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–∞–ª—å–Ω–æ
            print("‚öôÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–∞–ª—å–Ω–æ...")
            parameters_analysis = self.analyze_parameters_detailed(items_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            print("üèóÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...")
            structure_analysis = self.analyze_data_structure(items_data)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.analysis_results = {
                'metadata': {
                    'total_items': len(items_data),
                    'analysis_date': str(Path().cwd()),
                    'items_file': str(self.items_file)
                },
                'types': type_analysis,
                'prefabs': prefab_analysis,
                'parameters': parameters_analysis,
                'structure': structure_analysis
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_analysis_results()
            
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return self.analysis_results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def load_items_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            if not self.items_file.exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.items_file}")
                return None
            
            with open(self.items_file, 'rb') as f:
                data = json.loads(f.read())
            
            return data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def analyze_item_types(self, items_data):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        type_stats = Counter()
        type_parameters = defaultdict(set)
        
        for item_id, item_data in items_data.items():
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
            item_type = item_data.get('_type', 'Unknown')
            type_stats[item_type] += 1
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            if '_props' in item_data:
                for param_name in item_data['_props'].keys():
                    type_parameters[item_type].add(param_name)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∞–±—ã –ø–æ —Ç–∏–ø–∞–º
        prefab_types = defaultdict(set)
        for item_id, item_data in items_data.items():
            item_type = item_data.get('_type', 'Unknown')
            prefab_path = self.extract_prefab_path(item_data)
            if prefab_path:
                prefab_type = self.extract_prefab_type(prefab_path)
                prefab_types[item_type].add(prefab_type)
        
        return {
            'type_counts': dict(type_stats),
            'type_parameters': {k: list(v) for k, v in type_parameters.items()},
            'prefab_types_by_item_type': {k: list(v) for k, v in prefab_types.items()}
        }
    
    def analyze_prefabs(self, items_data):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–∞–±–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        prefab_paths = Counter()
        prefab_categories = defaultdict(Counter)
        prefab_parameters = defaultdict(set)
        
        for item_id, item_data in items_data.items():
            prefab_path = self.extract_prefab_path(item_data)
            if prefab_path:
                prefab_paths[prefab_path] += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ—Ñ–∞–±–æ–≤
                category, subcategory = self.analyze_prefab_path(prefab_path)
                prefab_categories[category][subcategory] += 1
                
                # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ—Ñ–∞–±–∞
                if '_props' in item_data:
                    for param_name in item_data['_props'].keys():
                        prefab_parameters[prefab_path].add(param_name)
        
        return {
            'prefab_paths': dict(prefab_paths),
            'prefab_categories': {k: dict(v) for k, v in prefab_categories.items()},
            'prefab_parameters': {k: list(v) for k, v in prefab_parameters.items()}
        }
    
    def analyze_parameters_detailed(self, items_data):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        print("  üîç –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ)
        all_parameters = self.collect_all_parameters(items_data)
        
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ {len(all_parameters)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ
        parameter_details = {}
        total_items = len(items_data)
        
        for param_name in all_parameters:
            print(f"  ‚öôÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä: {param_name}")
            param_info = self.analyze_single_parameter(items_data, param_name, total_items)
            parameter_details[param_name] = param_info
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        frequency_groups = self.group_parameters_by_frequency(parameter_details, total_items)
        
        return {
            'parameter_details': parameter_details,
            'frequency_groups': frequency_groups,
            'total_parameters': len(all_parameters),
            'total_items': total_items
        }
    
    def collect_all_parameters(self, items_data):
        """–°–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ)"""
        all_params = set()
        
        for item_id, item_data in items_data.items():
            if '_props' in item_data:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                for param_name in item_data['_props'].keys():
                    all_params.add(param_name)
                
                # –í–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                for param_name, param_value in item_data['_props'].items():
                    if isinstance(param_value, dict):
                        for nested_param in param_value.keys():
                            all_params.add(f"{param_name}.{nested_param}")
                    elif isinstance(param_value, list):
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
                        for i, item in enumerate(param_value):
                            if isinstance(item, dict):
                                for nested_param in item.keys():
                                    all_params.add(f"{param_name}[{i}].{nested_param}")
        
        return sorted(all_params)
    
    def analyze_single_parameter(self, items_data, param_name, total_items):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        usage_stats = {
            'total_usage': 0,
            'usage_by_type': defaultdict(int),
            'usage_by_prefab_category': defaultdict(int),
            'usage_by_prefab_subcategory': defaultdict(int),
            'items_without_param': 0,
            'types_without_param': set(),
            'prefab_categories_without_param': set(),
            'prefab_subcategories_without_param': set(),
            'parameter_types': set(),
            'sample_values': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        for item_id, item_data in items_data.items():
            item_type = item_data.get('_type', 'Unknown')
            prefab_path = self.extract_prefab_path(item_data)
            category, subcategory = self.analyze_prefab_path(prefab_path) if prefab_path else ('unknown', 'unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            has_param = self.has_parameter(item_data, param_name)
            
            if has_param:
                usage_stats['total_usage'] += 1
                usage_stats['usage_by_type'][item_type] += 1
                usage_stats['usage_by_prefab_category'][category] += 1
                usage_stats['usage_by_prefab_subcategory'][subcategory] += 1
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                param_value = self.get_parameter_value(item_data, param_name)
                if param_value is not None:
                    usage_stats['parameter_types'].add(type(param_value).__name__)
                    if len(usage_stats['sample_values']) < 5:
                        usage_stats['sample_values'].append(str(param_value)[:100])
            else:
                usage_stats['items_without_param'] += 1
                usage_stats['types_without_param'].add(item_type)
                usage_stats['prefab_categories_without_param'].add(category)
                usage_stats['prefab_subcategories_without_param'].add(subcategory)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
        usage_stats['types_without_param'] = list(usage_stats['types_without_param'])
        usage_stats['prefab_categories_without_param'] = list(usage_stats['prefab_categories_without_param'])
        usage_stats['prefab_subcategories_without_param'] = list(usage_stats['prefab_subcategories_without_param'])
        usage_stats['parameter_types'] = list(usage_stats['parameter_types'])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º defaultdict –≤ –æ–±—ã—á–Ω—ã–µ dict
        usage_stats['usage_by_type'] = dict(usage_stats['usage_by_type'])
        usage_stats['usage_by_prefab_category'] = dict(usage_stats['usage_by_prefab_category'])
        usage_stats['usage_by_prefab_subcategory'] = dict(usage_stats['usage_by_prefab_subcategory'])
        
        return usage_stats
    
    def has_parameter(self, item_data, param_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –ø—Ä–µ–¥–º–µ—Ç–µ"""
        if '_props' not in item_data:
            return False
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if param_name in item_data['_props']:
            return True
        
        # –í–ª–æ–∂–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Prefab.path")
        if '.' in param_name:
            parts = param_name.split('.')
            current = item_data['_props']
            for part in parts:
                if isinstance(current, dict) and part in current:
                    current = current[part]
                else:
                    return False
            return True
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä –≤ –º–∞—Å—Å–∏–≤–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Requirements[0]._tpl")
        if '[' in param_name and ']' in param_name:
            param_base = param_name.split('[')[0]
            if param_base in item_data['_props']:
                param_value = item_data['_props'][param_base]
                if isinstance(param_value, list):
                    return True
        
        return False
    
    def get_parameter_value(self, item_data, param_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        if '_props' not in item_data:
            return None
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if param_name in item_data['_props']:
            return item_data['_props'][param_name]
        
        # –í–ª–æ–∂–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        if '.' in param_name:
            parts = param_name.split('.')
            current = item_data['_props']
            for part in parts:
                if isinstance(current, dict) and part in current:
                    current = current[part]
                else:
                    return None
            return current
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä –≤ –º–∞—Å—Å–∏–≤–µ
        if '[' in param_name and ']' in param_name:
            param_base = param_name.split('[')[0]
            if param_base in item_data['_props']:
                param_value = item_data['_props'][param_base]
                if isinstance(param_value, list):
                    return param_value
        
        return None
    
    def group_parameters_by_frequency(self, parameter_details, total_items):
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        groups = {
            'universal': [],      # 100% –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            'very_common': [],    # 90-99% –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            'common': [],         # 70-89% –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            'frequent': [],       # 50-69% –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            'occasional': [],     # 20-49% –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            'rare': [],           # 5-19% –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            'very_rare': []       # <5% –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        }
        
        for param_name, details in parameter_details.items():
            usage_percent = (details['total_usage'] / total_items) * 100
            
            if usage_percent >= 100:
                groups['universal'].append(param_name)
            elif usage_percent >= 90:
                groups['very_common'].append(param_name)
            elif usage_percent >= 70:
                groups['common'].append(param_name)
            elif usage_percent >= 50:
                groups['frequent'].append(param_name)
            elif usage_percent >= 20:
                groups['occasional'].append(param_name)
            elif usage_percent >= 5:
                groups['rare'].append(param_name)
            else:
                groups['very_rare'].append(param_name)
        
        return groups
    
    def analyze_data_structure(self, items_data):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        structure_stats = defaultdict(int)
        required_fields = set()
        optional_fields = set()
        
        for item_id, item_data in items_data.items():
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            for field in ['_id', '_name', '_parent', '_type', '_props']:
                if field in item_data:
                    structure_stats[f'has_{field}'] += 1
                    required_fields.add(field)
                else:
                    optional_fields.add(field)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if '_props' in item_data:
                structure_stats['has_props'] += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ _props
                for prop_name, prop_value in item_data['_props'].items():
                    if isinstance(prop_value, dict):
                        structure_stats[f'props_has_dict_{prop_name}'] += 1
                    elif isinstance(prop_value, list):
                        structure_stats[f'props_has_list_{prop_name}'] += 1
        
        return {
            'structure_stats': dict(structure_stats),
            'required_fields': list(required_fields),
            'optional_fields': list(optional_fields)
        }
    
    def extract_prefab_path(self, item_data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –ø—Ä–µ—Ñ–∞–±–∞"""
        try:
            props = item_data.get('_props', {})
            prefab = props.get('Prefab', {})
            if isinstance(prefab, dict):
                return prefab.get('path', '')
            return ''
        except:
            return ''
    
    def extract_prefab_type(self, prefab_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ—Ñ–∞–±–∞ –∏–∑ –ø—É—Ç–∏"""
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—É—Ç—å: assets/content/category/subcategory/...
            parts = prefab_path.split('/')
            if len(parts) >= 4:
                return f"{parts[2]}/{parts[3]}"
            return 'unknown'
        except:
            return 'unknown'
    
    def analyze_prefab_path(self, prefab_path):
        """–ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∏ –ø—Ä–µ—Ñ–∞–±–∞"""
        try:
            parts = prefab_path.split('/')
            if len(parts) >= 4:
                return parts[2], parts[3]
            return 'unknown', 'unknown'
        except:
            return 'unknown', 'unknown'
    
    def save_analysis_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with open(self.cache_file, 'wb') as f:
                f.write(json.dumps(self.analysis_results, option=json.OPT_INDENT_2))
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.cache_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_analysis_results(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫—ç—à–∞"""
        try:
            if self.cache_file.exists():
                with open(self.cache_file, 'rb') as f:
                    return json.loads(f.read())
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return None
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.analysis_results:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print("\n" + "="*80)
        print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê –ü–†–ï–î–ú–ï–¢–û–í")
        print("="*80)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        metadata = self.analysis_results.get('metadata', {})
        print(f"üì¶ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {metadata.get('total_items', 0)}")
        
        # –¢–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        types = self.analysis_results.get('types', {})
        type_counts = types.get('type_counts', {})
        print(f"\nüè∑Ô∏è –¢–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({len(type_counts)}):")
        for item_type, count in sorted(type_counts.items(), key=lambda x: x[1], reverse=True):
            print(f"  {item_type}: {count}")
        
        # –ü—Ä–µ—Ñ–∞–±—ã
        prefabs = self.analysis_results.get('prefabs', {})
        prefab_categories = prefabs.get('prefab_categories', {})
        print(f"\nüé® –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ—Ñ–∞–±–æ–≤ ({len(prefab_categories)}):")
        for category, subcategories in prefabs.get('prefab_categories', {}).items():
            total = sum(subcategories.values())
            print(f"  {category}: {total} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            for subcat, count in sorted(subcategories.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"    - {subcat}: {count}")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        parameters = self.analysis_results.get('parameters', {})
        frequency_groups = parameters.get('frequency_groups', {})
        print(f"\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        
        for group_name, group_params in frequency_groups.items():
            if group_params:
                print(f"\n  üìä {group_name.upper().replace('_', ' ')} ({len(group_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤):")
                for param in group_params[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    param_details = parameters['parameter_details'].get(param, {})
                    usage_percent = (param_details.get('total_usage', 0) / metadata.get('total_items', 1)) * 100
                    print(f"    ‚Ä¢ {param} ({usage_percent:.1f}% –ø—Ä–µ–¥–º–µ—Ç–æ–≤)")
                if len(group_params) > 10:
                    print(f"    ... –∏ –µ—â–µ {len(group_params) - 10} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–Æ–ß–ï–í–´–• –ü–ê–†–ê–ú–ï–¢–†–ê–•:")
        print("="*80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        universal_params = frequency_groups.get('universal', [])
        if universal_params:
            print(f"\nüåê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ({len(universal_params)}):")
            for param in universal_params[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                self.print_parameter_details(param, parameters['parameter_details'].get(param, {}))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—á–µ–Ω—å —á–∞—Å—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        very_common_params = frequency_groups.get('very_common', [])
        if very_common_params:
            print(f"\nüî• –û–ß–ï–ù–¨ –ß–ê–°–¢–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ({len(very_common_params)}):")
            for param in very_common_params[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                self.print_parameter_details(param, parameters['parameter_details'].get(param, {}))
    
    def print_parameter_details(self, param_name, param_details):
        """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ"""
        if not param_details:
            return
        
        total_usage = param_details.get('total_usage', 0)
        items_without = param_details.get('items_without_param', 0)
        usage_by_type = param_details.get('usage_by_type', {})
        usage_by_category = param_details.get('usage_by_prefab_category', {})
        types_without = param_details.get('types_without_param', [])
        categories_without = param_details.get('prefab_categories_without_param', [])
        param_types = param_details.get('parameter_types', [])
        sample_values = param_details.get('sample_values', [])
        
        print(f"\n  üìã –ü–∞—Ä–∞–º–µ—Ç—Ä: {param_name}")
        print(f"    üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {total_usage} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({total_usage/(total_usage+items_without)*100:.1f}%)")
        print(f"    ‚ùå –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {items_without} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        print(f"    üè∑Ô∏è –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: {', '.join(param_types)}")
        
        if usage_by_type:
            print(f"    üìà –ü–æ —Ç–∏–ø–∞–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
            for item_type, count in sorted(usage_by_type.items(), key=lambda x: x[1], reverse=True):
                print(f"      ‚Ä¢ {item_type}: {count}")
        
        if usage_by_category:
            print(f"    üé® –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–µ—Ñ–∞–±–æ–≤:")
            for category, count in sorted(usage_by_category.items(), key=lambda x: x[1], reverse=True):
                print(f"      ‚Ä¢ {category}: {count}")
        
        if types_without:
            print(f"    üö´ –¢–∏–ø—ã –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {', '.join(types_without)}")
        
        if categories_without:
            print(f"    üö´ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {', '.join(categories_without)}")
        
        if sample_values:
            print(f"    üí° –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π: {', '.join(sample_values)}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    import sys
    from pathlib import Path
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
    if len(sys.argv) > 1:
        server_path = Path(sys.argv[1])
    else:
        server_path = Path(__file__).parent.parent
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ {server_path}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ItemsAnalyzer(server_path)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    results = analyzer.analyze_items()
    
    if results:
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        analyzer.print_summary()
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à.")
        print(f"üìÅ –§–∞–π–ª –∫—ç—à–∞: {analyzer.cache_file}")
    else:
        print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")

if __name__ == "__main__":
    main()