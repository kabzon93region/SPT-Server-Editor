#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
View Detailed Analysis - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
"""

import orjson as json
from pathlib import Path
from typing import Dict, List, Any
import sys

def load_analysis_results(cache_file: Path = None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫—ç—à–∞"""
    if cache_file is None:
        cache_file = Path(__file__).parent / "items_analysis_cache.json"
    
    try:
        if cache_file.exists():
            with open(cache_file, 'rb') as f:
                return json.loads(f.read())
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        return None

def print_parameter_summary(results: Dict[str, Any]):
    """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    parameters = results.get('parameters', {})
    frequency_groups = parameters.get('frequency_groups', {})
    parameter_details = parameters.get('parameter_details', {})
    metadata = results.get('metadata', {})
    total_items = metadata.get('total_items', 0)
    
    print("\n" + "="*100)
    print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–†–ï–î–ú–ï–¢–û–í")
    print("="*100)
    print(f"üì¶ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {total_items}")
    print(f"‚öôÔ∏è –í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {parameters.get('total_parameters', 0)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print(f"\nüìà –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–û –ß–ê–°–¢–û–¢–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
    print("-" * 100)
    
    for group_name, group_params in frequency_groups.items():
        if group_params:
            group_name_ru = {
                'universal': 'üåê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï (100%)',
                'very_common': 'üî• –û–ß–ï–ù–¨ –ß–ê–°–¢–´–ï (90-99%)',
                'common': 'üìä –ß–ê–°–¢–´–ï (70-89%)',
                'frequent': 'üìà –†–ê–°–ü–†–û–°–¢–†–ê–ù–ï–ù–ù–´–ï (50-69%)',
                'occasional': 'üîç –°–õ–£–ß–ê–ô–ù–´–ï (20-49%)',
                'rare': '‚ö†Ô∏è –†–ï–î–ö–ò–ï (5-19%)',
                'very_rare': 'üíé –û–ß–ï–ù–¨ –†–ï–î–ö–ò–ï (<5%)'
            }.get(group_name, group_name.upper())
            
            print(f"\n{group_name_ru} ({len(group_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤):")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            for i, param in enumerate(group_params[:20]):
                param_details = parameter_details.get(param, {})
                usage_percent = (param_details.get('total_usage', 0) / total_items) * 100
                usage_count = param_details.get('total_usage', 0)
                without_count = param_details.get('items_without_param', 0)
                
                print(f"  {i+1:2d}. {param:<40} | {usage_percent:5.1f}% ({usage_count:4d}/{total_items}) | –ë–µ–∑: {without_count:4d}")
            
            if len(group_params) > 20:
                print(f"  ... –∏ –µ—â–µ {len(group_params) - 20} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

def print_parameter_details(results: Dict[str, Any], param_name: str):
    """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ"""
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    parameters = results.get('parameters', {})
    parameter_details = parameters.get('parameter_details', {})
    metadata = results.get('metadata', {})
    total_items = metadata.get('total_items', 0)
    
    if param_name not in parameter_details:
        print(f"‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    details = parameter_details[param_name]
    
    print(f"\n{'='*100}")
    print(f"üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–†–ê–ú–ï–¢–†–ï: {param_name}")
    print(f"{'='*100}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_usage = details.get('total_usage', 0)
    items_without = details.get('items_without_param', 0)
    usage_percent = (total_usage / total_items) * 100
    
    print(f"üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {total_usage:,} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({usage_percent:.1f}%)")
    print(f"  ‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {items_without:,} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({100-usage_percent:.1f}%)")
    print(f"  ‚Ä¢ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: {', '.join(details.get('parameter_types', []))}")
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    usage_by_type = details.get('usage_by_type', {})
    if usage_by_type:
        print(f"\nüìà –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –ü–†–ï–î–ú–ï–¢–û–í:")
        for item_type, count in sorted(usage_by_type.items(), key=lambda x: x[1], reverse=True):
            type_percent = (count / total_items) * 100
            print(f"  ‚Ä¢ {item_type:<15}: {count:4,} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({type_percent:5.1f}%)")
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–µ—Ñ–∞–±–æ–≤
    usage_by_category = details.get('usage_by_prefab_category', {})
    if usage_by_category:
        print(f"\nüé® –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –ü–†–ï–§–ê–ë–û–í:")
        for category, count in sorted(usage_by_category.items(), key=lambda x: x[1], reverse=True):
            category_percent = (count / total_items) * 100
            print(f"  ‚Ä¢ {category:<20}: {count:4,} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({category_percent:5.1f}%)")
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–µ—Ñ–∞–±–æ–≤
    usage_by_subcategory = details.get('usage_by_prefab_subcategory', {})
    if usage_by_subcategory:
        print(f"\nüîç –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–û –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Ø–ú –ü–†–ï–§–ê–ë–û–í:")
        for subcategory, count in sorted(usage_by_subcategory.items(), key=lambda x: x[1], reverse=True):
            subcategory_percent = (count / total_items) * 100
            print(f"  ‚Ä¢ {subcategory:<25}: {count:4,} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ({subcategory_percent:5.1f}%)")
    
    # –¢–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    types_without = details.get('types_without_param', [])
    if types_without:
        print(f"\nüö´ –¢–ò–ü–´ –ü–†–ï–î–ú–ï–¢–û–í –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–ê:")
        for item_type in types_without:
            print(f"  ‚Ä¢ {item_type}")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ—Ñ–∞–±–æ–≤ –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    categories_without = details.get('prefab_categories_without_param', [])
    if categories_without:
        print(f"\nüö´ –ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ï–§–ê–ë–û–í –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–ê:")
        for category in categories_without:
            print(f"  ‚Ä¢ {category}")
    
    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ—Ñ–∞–±–æ–≤ –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    subcategories_without = details.get('prefab_subcategories_without_param', [])
    if subcategories_without:
        print(f"\nüö´ –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ò –ü–†–ï–§–ê–ë–û–í –ë–ï–ó –ü–ê–†–ê–ú–ï–¢–†–ê:")
        for subcategory in subcategories_without:
            print(f"  ‚Ä¢ {subcategory}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
    sample_values = details.get('sample_values', [])
    if sample_values:
        print(f"\nüí° –ü–†–ò–ú–ï–†–´ –ó–ù–ê–ß–ï–ù–ò–ô:")
        for i, value in enumerate(sample_values[:10], 1):
            print(f"  {i:2d}. {value}")
        if len(sample_values) > 10:
            print(f"  ... –∏ –µ—â–µ {len(sample_values) - 10} –ø—Ä–∏–º–µ—Ä–æ–≤")

def print_parameter_search(results: Dict[str, Any], search_term: str):
    """–ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    parameters = results.get('parameters', {})
    parameter_details = parameters.get('parameter_details', {})
    metadata = results.get('metadata', {})
    total_items = metadata.get('total_items', 0)
    
    # –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω
    matching_params = []
    for param_name in parameter_details.keys():
        if search_term.lower() in param_name.lower():
            matching_params.append(param_name)
    
    if not matching_params:
        print(f"‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{search_term}', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ (—Å–æ–¥–µ—Ä–∂–∞—Ç '{search_term}'):")
    print("-" * 100)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    matching_params.sort(key=lambda x: parameter_details[x].get('total_usage', 0), reverse=True)
    
    for i, param_name in enumerate(matching_params, 1):
        details = parameter_details[param_name]
        usage_count = details.get('total_usage', 0)
        usage_percent = (usage_count / total_items) * 100
        
        print(f"{i:2d}. {param_name:<50} | {usage_percent:5.1f}% ({usage_count:4,}/{total_items})")

def print_parameter_statistics(results: Dict[str, Any]):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    parameters = results.get('parameters', {})
    parameter_details = parameters.get('parameter_details', {})
    metadata = results.get('metadata', {})
    total_items = metadata.get('total_items', 0)
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–ê–†–ê–ú–ï–¢–†–ê–ú:")
    print("-" * 100)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
    type_stats = {}
    for param_name, details in parameter_details.items():
        param_types = details.get('parameter_types', [])
        for param_type in param_types:
            type_stats[param_type] = type_stats.get(param_type, 0) + 1
    
    print(f"\nüè∑Ô∏è –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –î–ê–ù–ù–´–•:")
    for param_type, count in sorted(type_stats.items(), key=lambda x: x[1], reverse=True):
        print(f"  ‚Ä¢ {param_type:<15}: {count:4,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_stats = {
        'universal': 0,      # 100%
        'very_common': 0,    # 90-99%
        'common': 0,         # 70-89%
        'frequent': 0,       # 50-69%
        'occasional': 0,     # 20-49%
        'rare': 0,           # 5-19%
        'very_rare': 0      # <5%
    }
    
    for param_name, details in parameter_details.items():
        usage_percent = (details.get('total_usage', 0) / total_items) * 100
        
        if usage_percent >= 100:
            usage_stats['universal'] += 1
        elif usage_percent >= 90:
            usage_stats['very_common'] += 1
        elif usage_percent >= 70:
            usage_stats['common'] += 1
        elif usage_percent >= 50:
            usage_stats['frequent'] += 1
        elif usage_percent >= 20:
            usage_stats['occasional'] += 1
        elif usage_percent >= 5:
            usage_stats['rare'] += 1
        else:
            usage_stats['very_rare'] += 1
    
    print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ß–ê–°–¢–û–¢–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
    for group, count in usage_stats.items():
        group_name = {
            'universal': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ (100%)',
            'very_common': '–û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ (90-99%)',
            'common': '–ß–∞—Å—Ç—ã–µ (70-89%)',
            'frequent': '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ (50-69%)',
            'occasional': '–°–ª—É—á–∞–π–Ω—ã–µ (20-49%)',
            'rare': '–†–µ–¥–∫–∏–µ (5-19%)',
            'very_rare': '–û—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ (<5%)'
        }[group]
        print(f"  ‚Ä¢ {group_name:<25}: {count:4,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
    parser.add_argument('--cache', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--param', type=str, help='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')
    parser.add_argument('--search', type=str, help='–ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    cache_file = Path(args.cache) if args.cache else None
    results = load_analysis_results(cache_file)
    
    if not results:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if args.param:
        print_parameter_details(results, args.param)
    elif args.search:
        print_parameter_search(results, args.search)
    elif args.stats:
        print_parameter_statistics(results)
    else:
        print_parameter_summary(results)

if __name__ == "__main__":
    main()