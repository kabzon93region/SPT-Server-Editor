#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
JSON Editor - –†–µ–¥–∞–∫—Ç–æ—Ä JSON —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import json
import orjson
from pathlib import Path
from typing import Any, Optional, Callable

class JSONEditor:
    """–†–µ–¥–∞–∫—Ç–æ—Ä JSON —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
    
    def __init__(self, parent, title: str = "JSON Editor", data: Any = None, 
                 on_save: Optional[Callable] = None, readonly: bool = False):
        self.parent = parent
        self.title = title
        self.data = data
        self.on_save = on_save
        self.readonly = readonly
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(title)
        self.dialog.geometry("800x600")
        self.dialog.minsize(600, 400)
        self.dialog.resizable(True, True)
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.original_data = data
        self.is_modified = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if data is not None:
            self.load_data(data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.dialog.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.dialog)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = ttk.Frame(main_frame)
        toolbar.pack(fill=tk.X, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏
        ttk.Button(toolbar, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_data).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_data).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar, text="üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.format_json).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar, text="üîç –ü–æ–∏—Å–∫", command=self.search_text).pack(side=tk.LEFT, padx=(0, 5))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤")
        status_label = ttk.Label(toolbar, textvariable=self.status_var)
        status_label.pack(side=tk.RIGHT)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (—Ç–µ–º–∞ VS Code)
        self.text_widget = scrolledtext.ScrolledText(
            main_frame,
            wrap=tk.NONE,
            font=('Consolas', 10),
            bg='#ffffff',
            fg='#000000',
            insertbackground='#000000',
            selectbackground='#0078d4',
            selectforeground='#ffffff',
            undo=True,
            maxundo=50
        )
        self.text_widget.pack(fill=tk.BOTH, expand=True)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.text_widget.bind('<KeyRelease>', self.on_text_change)
        self.text_widget.bind('<Control-s>', lambda e: self.save_data())
        self.text_widget.bind('<Control-f>', lambda e: self.search_text())
        self.text_widget.bind('<Control-z>', lambda e: self.text_widget.edit_undo())
        self.text_widget.bind('<Control-y>', lambda e: self.text_widget.edit_redo())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è readonly
        if self.readonly:
            self.text_widget.config(state=tk.DISABLED)
    
    def load_data(self, data: Any):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
            if isinstance(data, (dict, list)):
                json_str = orjson.dumps(data, option=orjson.OPT_INDENT_2).decode('utf-8')
            else:
                json_str = str(data)
            
            # –û—á–∏—â–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.text_widget.delete(1.0, tk.END)
            self.text_widget.insert(1.0, json_str)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            self.apply_syntax_highlighting()
            
            self.is_modified = False
            self.update_status("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    def apply_syntax_highlighting(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JSON"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            content = self.text_widget.get(1.0, tk.END)
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
            self.text_widget.tag_remove("json_key", 1.0, tk.END)
            self.text_widget.tag_remove("json_string", 1.0, tk.END)
            self.text_widget.tag_remove("json_number", 1.0, tk.END)
            self.text_widget.tag_remove("json_boolean", 1.0, tk.END)
            self.text_widget.tag_remove("json_null", 1.0, tk.END)
            self.text_widget.tag_remove("json_punctuation", 1.0, tk.END)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ (—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞)
            self.text_widget.tag_configure("json_key", foreground="#0000ff", font=('Consolas', 10, 'bold'))
            self.text_widget.tag_configure("json_string", foreground="#008000", font=('Consolas', 10))
            self.text_widget.tag_configure("json_number", foreground="#ff6600", font=('Consolas', 10))
            self.text_widget.tag_configure("json_boolean", foreground="#800080", font=('Consolas', 10, 'bold'))
            self.text_widget.tag_configure("json_null", foreground="#808080", font=('Consolas', 10, 'italic'))
            self.text_widget.tag_configure("json_punctuation", foreground="#000000", font=('Consolas', 10, 'bold'))
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            lines = content.split('\n')
            for line_num, line in enumerate(lines, 1):
                self.highlight_line(line, line_num)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
    
    def highlight_line(self, line: str, line_num: int):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–∏ (—Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ)
            import re
            
            # –ö–ª—é—á–∏
            key_pattern = r'"([^"]+)"\s*:'
            for match in re.finditer(key_pattern, line):
                start = f"{line_num}.{match.start()}"
                end = f"{line_num}.{match.end()}"
                self.text_widget.tag_add("json_key", start, end)
            
            # –°—Ç—Ä–æ–∫–∏
            string_pattern = r'"[^"]*"'
            for match in re.finditer(string_pattern, line):
                start = f"{line_num}.{match.start()}"
                end = f"{line_num}.{match.end()}"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–ª—é—á
                if not line[match.end():match.end()+1].strip().startswith(':'):
                    self.text_widget.tag_add("json_string", start, end)
            
            # –ß–∏—Å–ª–∞
            number_pattern = r'\b\d+\.?\d*\b'
            for match in re.finditer(number_pattern, line):
                start = f"{line_num}.{match.start()}"
                end = f"{line_num}.{match.end()}"
                self.text_widget.tag_add("json_number", start, end)
            
            # –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
            boolean_pattern = r'\b(true|false)\b'
            for match in re.finditer(boolean_pattern, line, re.IGNORECASE):
                start = f"{line_num}.{match.start()}"
                end = f"{line_num}.{match.end()}"
                self.text_widget.tag_add("json_boolean", start, end)
            
            # null
            null_pattern = r'\bnull\b'
            for match in re.finditer(null_pattern, line, re.IGNORECASE):
                start = f"{line_num}.{match.start()}"
                end = f"{line_num}.{match.end()}"
                self.text_widget.tag_add("json_null", start, end)
            
            # –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
            punct_pattern = r'[{}[\](),:]'
            for match in re.finditer(punct_pattern, line):
                start = f"{line_num}.{match.start()}"
                end = f"{line_num}.{match.end()}"
                self.text_widget.tag_add("json_punctuation", start, end)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
    
    def on_text_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        self.is_modified = True
        self.update_status("–ò–∑–º–µ–Ω–µ–Ω–æ")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        self.dialog.after(100, self.apply_syntax_highlighting)
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
            content = self.text_widget.get(1.0, tk.END).strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                parsed_data = orjson.loads(content)
            except json.JSONDecodeError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ JSON", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON:\n{str(e)}")
                return
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if self.on_save:
                self.on_save(parsed_data)
            
            self.is_modified = False
            self.update_status("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.original_data is not None:
            self.load_data(self.original_data)
            self.update_status("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    def format_json(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
            content = self.text_widget.get(1.0, tk.END).strip()
            
            # –ü–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            parsed_data = orjson.loads(content)
            formatted = orjson.dumps(parsed_data, option=orjson.OPT_INDENT_2).decode('utf-8')
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            self.text_widget.delete(1.0, tk.END)
            self.text_widget.insert(1.0, formatted)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            self.apply_syntax_highlighting()
            
            self.update_status("–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            
        except json.JSONDecodeError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ JSON", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON:\n{str(e)}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    def search_text(self):
        """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞"""
        search_dialog = tk.simpledialog.askstring("–ü–æ–∏—Å–∫", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        if search_dialog:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            self.text_widget.tag_remove("search", 1.0, tk.END)
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç
            start = 1.0
            while True:
                pos = self.text_widget.search(search_dialog, start, tk.END)
                if not pos:
                    break
                
                end = f"{pos}+{len(search_dialog)}c"
                self.text_widget.tag_add("search", pos, end)
                start = end
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥ –ø–æ–∏—Å–∫–∞
            self.text_widget.tag_configure("search", background="yellow", foreground="black")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É
            first_match = self.text_widget.search(search_dialog, 1.0, tk.END)
            if first_match:
                self.text_widget.see(first_match)
                self.text_widget.mark_set(tk.INSERT, first_match)
    
    def update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_var.set(message)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        if self.is_modified:
            result = messagebox.askyesnocancel(
                "–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å?"
            )
            if result is True:
                self.save_data()
            elif result is None:
                return  # –û—Ç–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        
        self.dialog.destroy()

def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    root.withdraw()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "name": "Test Item",
        "id": "test_item_001",
        "properties": {
            "weight": 1.5,
            "size": [2, 3],
            "enabled": True,
            "tags": ["weapon", "rifle"]
        },
        "stats": {
            "damage": 45,
            "accuracy": 0.85,
            "range": 300
        }
    }
    
    editor = JSONEditor(root, "Test JSON Editor", test_data)
    root.mainloop()

if __name__ == "__main__":
    main()
